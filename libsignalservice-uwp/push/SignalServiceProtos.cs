// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace libsignalservice.push {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class SignalServiceProtos {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    private static pbd::MessageDescriptor internal__static_textsecure_Envelope__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.Envelope, global::libsignalservice.push.SignalServiceProtos.Envelope.Builder> internal__static_textsecure_Envelope__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_Content__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.Content, global::libsignalservice.push.SignalServiceProtos.Content.Builder> internal__static_textsecure_Content__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_DataMessage__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.DataMessage, global::libsignalservice.push.SignalServiceProtos.DataMessage.Builder> internal__static_textsecure_DataMessage__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_SyncMessage__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Builder> internal__static_textsecure_SyncMessage__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_SyncMessage_Sent__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent.Builder> internal__static_textsecure_SyncMessage_Sent__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_SyncMessage_Contacts__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts.Builder> internal__static_textsecure_SyncMessage_Contacts__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_SyncMessage_Groups__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups.Builder> internal__static_textsecure_SyncMessage_Groups__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_SyncMessage_Blocked__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked.Builder> internal__static_textsecure_SyncMessage_Blocked__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_SyncMessage_Request__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.Builder> internal__static_textsecure_SyncMessage_Request__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_SyncMessage_Read__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read.Builder> internal__static_textsecure_SyncMessage_Read__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_AttachmentPointer__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.AttachmentPointer, global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.Builder> internal__static_textsecure_AttachmentPointer__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_GroupContext__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.GroupContext, global::libsignalservice.push.SignalServiceProtos.GroupContext.Builder> internal__static_textsecure_GroupContext__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_ContactDetails__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.ContactDetails, global::libsignalservice.push.SignalServiceProtos.ContactDetails.Builder> internal__static_textsecure_ContactDetails__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_ContactDetails_Avatar__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar, global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar.Builder> internal__static_textsecure_ContactDetails_Avatar__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_GroupDetails__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.GroupDetails, global::libsignalservice.push.SignalServiceProtos.GroupDetails.Builder> internal__static_textsecure_GroupDetails__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_textsecure_GroupDetails_Avatar__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar, global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar.Builder> internal__static_textsecure_GroupDetails_Avatar__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static SignalServiceProtos() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNTaWduYWxTZXJ2aWNlLnByb3RvEgp0ZXh0c2VjdXJlIvoBCghFbnZlbG9w", 
            "ZRInCgR0eXBlGAEgASgOMhkudGV4dHNlY3VyZS5FbnZlbG9wZS5UeXBlEg4K", 
            "BnNvdXJjZRgCIAEoCRIUCgxzb3VyY2VEZXZpY2UYByABKA0SDQoFcmVsYXkY", 
            "AyABKAkSEQoJdGltZXN0YW1wGAUgASgEEhUKDWxlZ2FjeU1lc3NhZ2UYBiAB", 
            "KAwSDwoHY29udGVudBgIIAEoDCJVCgRUeXBlEgsKB1VOS05PV04QABIOCgpD", 
            "SVBIRVJURVhUEAESEAoMS0VZX0VYQ0hBTkdFEAISEQoNUFJFS0VZX0JVTkRM", 
            "RRADEgsKB1JFQ0VJUFQQBSJlCgdDb250ZW50EiwKC2RhdGFNZXNzYWdlGAEg", 
            "ASgLMhcudGV4dHNlY3VyZS5EYXRhTWVzc2FnZRIsCgtzeW5jTWVzc2FnZRgC", 
            "IAEoCzIXLnRleHRzZWN1cmUuU3luY01lc3NhZ2Ui0wEKC0RhdGFNZXNzYWdl", 
            "EgwKBGJvZHkYASABKAkSMgoLYXR0YWNobWVudHMYAiADKAsyHS50ZXh0c2Vj", 
            "dXJlLkF0dGFjaG1lbnRQb2ludGVyEicKBWdyb3VwGAMgASgLMhgudGV4dHNl", 
            "Y3VyZS5Hcm91cENvbnRleHQSDQoFZmxhZ3MYBCABKA0SEwoLZXhwaXJlVGlt", 
            "ZXIYBSABKA0iNQoFRmxhZ3MSDwoLRU5EX1NFU1NJT04QARIbChdFWFBJUkFU", 
            "SU9OX1RJTUVSX1VQREFURRACItsFCgtTeW5jTWVzc2FnZRIqCgRzZW50GAEg", 
            "ASgLMhwudGV4dHNlY3VyZS5TeW5jTWVzc2FnZS5TZW50EjIKCGNvbnRhY3Rz", 
            "GAIgASgLMiAudGV4dHNlY3VyZS5TeW5jTWVzc2FnZS5Db250YWN0cxIuCgZn", 
            "cm91cHMYAyABKAsyHi50ZXh0c2VjdXJlLlN5bmNNZXNzYWdlLkdyb3VwcxIw", 
            "CgdyZXF1ZXN0GAQgASgLMh8udGV4dHNlY3VyZS5TeW5jTWVzc2FnZS5SZXF1", 
            "ZXN0EioKBHJlYWQYBSADKAsyHC50ZXh0c2VjdXJlLlN5bmNNZXNzYWdlLlJl", 
            "YWQSMAoHYmxvY2tlZBgGIAEoCzIfLnRleHRzZWN1cmUuU3luY01lc3NhZ2Uu", 
            "QmxvY2tlZBp6CgRTZW50EhMKC2Rlc3RpbmF0aW9uGAEgASgJEhEKCXRpbWVz", 
            "dGFtcBgCIAEoBBIoCgdtZXNzYWdlGAMgASgLMhcudGV4dHNlY3VyZS5EYXRh", 
            "TWVzc2FnZRIgChhleHBpcmF0aW9uU3RhcnRUaW1lc3RhbXAYBCABKAQaNwoI", 
            "Q29udGFjdHMSKwoEYmxvYhgBIAEoCzIdLnRleHRzZWN1cmUuQXR0YWNobWVu", 
            "dFBvaW50ZXIaNQoGR3JvdXBzEisKBGJsb2IYASABKAsyHS50ZXh0c2VjdXJl", 
            "LkF0dGFjaG1lbnRQb2ludGVyGhoKB0Jsb2NrZWQSDwoHbnVtYmVycxgBIAMo", 
            "CRp5CgdSZXF1ZXN0EjIKBHR5cGUYASABKA4yJC50ZXh0c2VjdXJlLlN5bmNN", 
            "ZXNzYWdlLlJlcXVlc3QuVHlwZSI6CgRUeXBlEgsKB1VOS05PV04QABIMCghD", 
            "T05UQUNUUxABEgoKBkdST1VQUxACEgsKB0JMT0NLRUQQAxopCgRSZWFkEg4K", 
            "BnNlbmRlchgBIAEoCRIRCgl0aW1lc3RhbXAYAiABKAQiYgoRQXR0YWNobWVu", 
            "dFBvaW50ZXISCgoCaWQYASABKAYSEwoLY29udGVudFR5cGUYAiABKAkSCwoD", 
            "a2V5GAMgASgMEgwKBHNpemUYBCABKA0SEQoJdGh1bWJuYWlsGAUgASgMIs0B", 
            "CgxHcm91cENvbnRleHQSCgoCaWQYASABKAwSKwoEdHlwZRgCIAEoDjIdLnRl", 
            "eHRzZWN1cmUuR3JvdXBDb250ZXh0LlR5cGUSDAoEbmFtZRgDIAEoCRIPCgdt", 
            "ZW1iZXJzGAQgAygJEi0KBmF2YXRhchgFIAEoCzIdLnRleHRzZWN1cmUuQXR0", 
            "YWNobWVudFBvaW50ZXIiNgoEVHlwZRILCgdVTktOT1dOEAASCgoGVVBEQVRF", 
            "EAESCwoHREVMSVZFUhACEggKBFFVSVQQAyKfAQoOQ29udGFjdERldGFpbHMS", 
            "DgoGbnVtYmVyGAEgASgJEgwKBG5hbWUYAiABKAkSMQoGYXZhdGFyGAMgASgL", 
            "MiEudGV4dHNlY3VyZS5Db250YWN0RGV0YWlscy5BdmF0YXISDQoFY29sb3IY", 
            "BCABKAkaLQoGQXZhdGFyEhMKC2NvbnRlbnRUeXBlGAEgASgJEg4KBmxlbmd0", 
            "aBgCIAEoDSKvAQoMR3JvdXBEZXRhaWxzEgoKAmlkGAEgASgMEgwKBG5hbWUY", 
            "AiABKAkSDwoHbWVtYmVycxgDIAMoCRIvCgZhdmF0YXIYBCABKAsyHy50ZXh0", 
            "c2VjdXJlLkdyb3VwRGV0YWlscy5BdmF0YXISFAoGYWN0aXZlGAUgASgIOgR0", 
            "cnVlGi0KBkF2YXRhchITCgtjb250ZW50VHlwZRgBIAEoCRIOCgZsZW5ndGgY", 
            "AiABKA1CQgorb3JnLndoaXNwZXJzeXN0ZW1zLnRleHRzZWN1cmUuaW50ZXJu", 
          "YWwucHVzaEITU2lnbmFsU2VydmljZVByb3Rvcw=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_textsecure_Envelope__Descriptor = Descriptor.MessageTypes[0];
        internal__static_textsecure_Envelope__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.Envelope, global::libsignalservice.push.SignalServiceProtos.Envelope.Builder>(internal__static_textsecure_Envelope__Descriptor,
                new string[] { "Type", "Source", "SourceDevice", "Relay", "Timestamp", "LegacyMessage", "Content", });
        internal__static_textsecure_Content__Descriptor = Descriptor.MessageTypes[1];
        internal__static_textsecure_Content__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.Content, global::libsignalservice.push.SignalServiceProtos.Content.Builder>(internal__static_textsecure_Content__Descriptor,
                new string[] { "DataMessage", "SyncMessage", });
        internal__static_textsecure_DataMessage__Descriptor = Descriptor.MessageTypes[2];
        internal__static_textsecure_DataMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.DataMessage, global::libsignalservice.push.SignalServiceProtos.DataMessage.Builder>(internal__static_textsecure_DataMessage__Descriptor,
                new string[] { "Body", "Attachments", "Group", "Flags", "ExpireTimer", });
        internal__static_textsecure_SyncMessage__Descriptor = Descriptor.MessageTypes[3];
        internal__static_textsecure_SyncMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Builder>(internal__static_textsecure_SyncMessage__Descriptor,
                new string[] { "Sent", "Contacts", "Groups", "Request", "Read", "Blocked", });
        internal__static_textsecure_SyncMessage_Sent__Descriptor = internal__static_textsecure_SyncMessage__Descriptor.NestedTypes[0];
        internal__static_textsecure_SyncMessage_Sent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent.Builder>(internal__static_textsecure_SyncMessage_Sent__Descriptor,
                new string[] { "Destination", "Timestamp", "Message", "ExpirationStartTimestamp", });
        internal__static_textsecure_SyncMessage_Contacts__Descriptor = internal__static_textsecure_SyncMessage__Descriptor.NestedTypes[1];
        internal__static_textsecure_SyncMessage_Contacts__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts.Builder>(internal__static_textsecure_SyncMessage_Contacts__Descriptor,
                new string[] { "Blob", });
        internal__static_textsecure_SyncMessage_Groups__Descriptor = internal__static_textsecure_SyncMessage__Descriptor.NestedTypes[2];
        internal__static_textsecure_SyncMessage_Groups__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups.Builder>(internal__static_textsecure_SyncMessage_Groups__Descriptor,
                new string[] { "Blob", });
        internal__static_textsecure_SyncMessage_Blocked__Descriptor = internal__static_textsecure_SyncMessage__Descriptor.NestedTypes[3];
        internal__static_textsecure_SyncMessage_Blocked__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked.Builder>(internal__static_textsecure_SyncMessage_Blocked__Descriptor,
                new string[] { "Numbers", });
        internal__static_textsecure_SyncMessage_Request__Descriptor = internal__static_textsecure_SyncMessage__Descriptor.NestedTypes[4];
        internal__static_textsecure_SyncMessage_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.Builder>(internal__static_textsecure_SyncMessage_Request__Descriptor,
                new string[] { "Type", });
        internal__static_textsecure_SyncMessage_Read__Descriptor = internal__static_textsecure_SyncMessage__Descriptor.NestedTypes[5];
        internal__static_textsecure_SyncMessage_Read__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read.Builder>(internal__static_textsecure_SyncMessage_Read__Descriptor,
                new string[] { "Sender", "Timestamp", });
        internal__static_textsecure_AttachmentPointer__Descriptor = Descriptor.MessageTypes[4];
        internal__static_textsecure_AttachmentPointer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.AttachmentPointer, global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.Builder>(internal__static_textsecure_AttachmentPointer__Descriptor,
                new string[] { "Id", "ContentType", "Key", "Size", "Thumbnail", });
        internal__static_textsecure_GroupContext__Descriptor = Descriptor.MessageTypes[5];
        internal__static_textsecure_GroupContext__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.GroupContext, global::libsignalservice.push.SignalServiceProtos.GroupContext.Builder>(internal__static_textsecure_GroupContext__Descriptor,
                new string[] { "Id", "Type", "Name", "Members", "Avatar", });
        internal__static_textsecure_ContactDetails__Descriptor = Descriptor.MessageTypes[6];
        internal__static_textsecure_ContactDetails__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.ContactDetails, global::libsignalservice.push.SignalServiceProtos.ContactDetails.Builder>(internal__static_textsecure_ContactDetails__Descriptor,
                new string[] { "Number", "Name", "Avatar", "Color", });
        internal__static_textsecure_ContactDetails_Avatar__Descriptor = internal__static_textsecure_ContactDetails__Descriptor.NestedTypes[0];
        internal__static_textsecure_ContactDetails_Avatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar, global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar.Builder>(internal__static_textsecure_ContactDetails_Avatar__Descriptor,
                new string[] { "ContentType", "Length", });
        internal__static_textsecure_GroupDetails__Descriptor = Descriptor.MessageTypes[7];
        internal__static_textsecure_GroupDetails__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.GroupDetails, global::libsignalservice.push.SignalServiceProtos.GroupDetails.Builder>(internal__static_textsecure_GroupDetails__Descriptor,
                new string[] { "Id", "Name", "Members", "Avatar", "Active", });
        internal__static_textsecure_GroupDetails_Avatar__Descriptor = internal__static_textsecure_GroupDetails__Descriptor.NestedTypes[0];
        internal__static_textsecure_GroupDetails_Avatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar, global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar.Builder>(internal__static_textsecure_GroupDetails_Avatar__Descriptor,
                new string[] { "ContentType", "Length", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Envelope : pb::GeneratedMessage<Envelope, Envelope.Builder> {
      private Envelope() { }
      private static readonly Envelope defaultInstance = new Envelope().MakeReadOnly();
      private static readonly string[] _envelopeFieldNames = new string[] { "content", "legacyMessage", "relay", "source", "sourceDevice", "timestamp", "type" };
      private static readonly uint[] _envelopeFieldTags = new uint[] { 66, 50, 26, 18, 56, 40, 8 };
      public static Envelope DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Envelope DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Envelope ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_Envelope__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Envelope, Envelope.Builder> InternalFieldAccessors {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_Envelope__FieldAccessorTable; }
      }
      
      #region Nested types
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        public enum Type {
          UNKNOWN = 0,
          CIPHERTEXT = 1,
          KEY_EXCHANGE = 2,
          PREKEY_BUNDLE = 3,
          RECEIPT = 5,
        }
        
      }
      #endregion
      
      public const int TypeFieldNumber = 1;
      private bool hasType;
      private global::libsignalservice.push.SignalServiceProtos.Envelope.Types.Type type_ = global::libsignalservice.push.SignalServiceProtos.Envelope.Types.Type.UNKNOWN;
      public bool HasType {
        get { return hasType; }
      }
      public global::libsignalservice.push.SignalServiceProtos.Envelope.Types.Type Type {
        get { return type_; }
      }
      
      public const int SourceFieldNumber = 2;
      private bool hasSource;
      private string source_ = "";
      public bool HasSource {
        get { return hasSource; }
      }
      public string Source {
        get { return source_; }
      }
      
      public const int SourceDeviceFieldNumber = 7;
      private bool hasSourceDevice;
      private uint sourceDevice_;
      public bool HasSourceDevice {
        get { return hasSourceDevice; }
      }
      [global::System.CLSCompliant(false)]
      public uint SourceDevice {
        get { return sourceDevice_; }
      }
      
      public const int RelayFieldNumber = 3;
      private bool hasRelay;
      private string relay_ = "";
      public bool HasRelay {
        get { return hasRelay; }
      }
      public string Relay {
        get { return relay_; }
      }
      
      public const int TimestampFieldNumber = 5;
      private bool hasTimestamp;
      private ulong timestamp_;
      public bool HasTimestamp {
        get { return hasTimestamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Timestamp {
        get { return timestamp_; }
      }
      
      public const int LegacyMessageFieldNumber = 6;
      private bool hasLegacyMessage;
      private pb::ByteString legacyMessage_ = pb::ByteString.Empty;
      public bool HasLegacyMessage {
        get { return hasLegacyMessage; }
      }
      public pb::ByteString LegacyMessage {
        get { return legacyMessage_; }
      }
      
      public const int ContentFieldNumber = 8;
      private bool hasContent;
      private pb::ByteString content_ = pb::ByteString.Empty;
      public bool HasContent {
        get { return hasContent; }
      }
      public pb::ByteString Content {
        get { return content_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _envelopeFieldNames;
        if (hasType) {
          output.WriteEnum(1, field_names[6], (int) Type, Type);
        }
        if (hasSource) {
          output.WriteString(2, field_names[3], Source);
        }
        if (hasRelay) {
          output.WriteString(3, field_names[2], Relay);
        }
        if (hasTimestamp) {
          output.WriteUInt64(5, field_names[5], Timestamp);
        }
        if (hasLegacyMessage) {
          output.WriteBytes(6, field_names[1], LegacyMessage);
        }
        if (hasSourceDevice) {
          output.WriteUInt32(7, field_names[4], SourceDevice);
        }
        if (hasContent) {
          output.WriteBytes(8, field_names[0], Content);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasSource) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Source);
        }
        if (hasSourceDevice) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, SourceDevice);
        }
        if (hasRelay) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Relay);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeUInt64Size(5, Timestamp);
        }
        if (hasLegacyMessage) {
          size += pb::CodedOutputStream.ComputeBytesSize(6, LegacyMessage);
        }
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeBytesSize(8, Content);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Envelope ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Envelope ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Envelope ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Envelope ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Envelope ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Envelope ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Envelope ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Envelope ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Envelope ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Envelope ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Envelope MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Envelope prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Envelope, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Envelope cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Envelope result;
        
        private Envelope PrepareBuilder() {
          if (resultIsReadOnly) {
            Envelope original = result;
            result = new Envelope();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Envelope MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::libsignalservice.push.SignalServiceProtos.Envelope.Descriptor; }
        }
        
        public override Envelope DefaultInstanceForType {
          get { return global::libsignalservice.push.SignalServiceProtos.Envelope.DefaultInstance; }
        }
        
        public override Envelope BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Envelope) {
            return MergeFrom((Envelope) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Envelope other) {
          if (other == global::libsignalservice.push.SignalServiceProtos.Envelope.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasSource) {
            Source = other.Source;
          }
          if (other.HasSourceDevice) {
            SourceDevice = other.SourceDevice;
          }
          if (other.HasRelay) {
            Relay = other.Relay;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          if (other.HasLegacyMessage) {
            LegacyMessage = other.LegacyMessage;
          }
          if (other.HasContent) {
            Content = other.Content;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_envelopeFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _envelopeFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                object unknown;
                if(input.ReadEnum(ref result.type_, out unknown)) {
                  result.hasType = true;
                } else if(unknown is int) {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                }
                break;
              }
              case 18: {
                result.hasSource = input.ReadString(ref result.source_);
                break;
              }
              case 26: {
                result.hasRelay = input.ReadString(ref result.relay_);
                break;
              }
              case 40: {
                result.hasTimestamp = input.ReadUInt64(ref result.timestamp_);
                break;
              }
              case 50: {
                result.hasLegacyMessage = input.ReadBytes(ref result.legacyMessage_);
                break;
              }
              case 56: {
                result.hasSourceDevice = input.ReadUInt32(ref result.sourceDevice_);
                break;
              }
              case 66: {
                result.hasContent = input.ReadBytes(ref result.content_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasType {
         get { return result.hasType; }
        }
        public global::libsignalservice.push.SignalServiceProtos.Envelope.Types.Type Type {
          get { return result.Type; }
          set { SetType(value); }
        }
        public Builder SetType(global::libsignalservice.push.SignalServiceProtos.Envelope.Types.Type value) {
          PrepareBuilder();
          result.hasType = true;
          result.type_ = value;
          return this;
        }
        public Builder ClearType() {
          PrepareBuilder();
          result.hasType = false;
          result.type_ = global::libsignalservice.push.SignalServiceProtos.Envelope.Types.Type.UNKNOWN;
          return this;
        }
        
        public bool HasSource {
          get { return result.hasSource; }
        }
        public string Source {
          get { return result.Source; }
          set { SetSource(value); }
        }
        public Builder SetSource(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasSource = true;
          result.source_ = value;
          return this;
        }
        public Builder ClearSource() {
          PrepareBuilder();
          result.hasSource = false;
          result.source_ = "";
          return this;
        }
        
        public bool HasSourceDevice {
          get { return result.hasSourceDevice; }
        }
        [global::System.CLSCompliant(false)]
        public uint SourceDevice {
          get { return result.SourceDevice; }
          set { SetSourceDevice(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetSourceDevice(uint value) {
          PrepareBuilder();
          result.hasSourceDevice = true;
          result.sourceDevice_ = value;
          return this;
        }
        public Builder ClearSourceDevice() {
          PrepareBuilder();
          result.hasSourceDevice = false;
          result.sourceDevice_ = 0;
          return this;
        }
        
        public bool HasRelay {
          get { return result.hasRelay; }
        }
        public string Relay {
          get { return result.Relay; }
          set { SetRelay(value); }
        }
        public Builder SetRelay(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasRelay = true;
          result.relay_ = value;
          return this;
        }
        public Builder ClearRelay() {
          PrepareBuilder();
          result.hasRelay = false;
          result.relay_ = "";
          return this;
        }
        
        public bool HasTimestamp {
          get { return result.hasTimestamp; }
        }
        [global::System.CLSCompliant(false)]
        public ulong Timestamp {
          get { return result.Timestamp; }
          set { SetTimestamp(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetTimestamp(ulong value) {
          PrepareBuilder();
          result.hasTimestamp = true;
          result.timestamp_ = value;
          return this;
        }
        public Builder ClearTimestamp() {
          PrepareBuilder();
          result.hasTimestamp = false;
          result.timestamp_ = 0UL;
          return this;
        }
        
        public bool HasLegacyMessage {
          get { return result.hasLegacyMessage; }
        }
        public pb::ByteString LegacyMessage {
          get { return result.LegacyMessage; }
          set { SetLegacyMessage(value); }
        }
        public Builder SetLegacyMessage(pb::ByteString value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasLegacyMessage = true;
          result.legacyMessage_ = value;
          return this;
        }
        public Builder ClearLegacyMessage() {
          PrepareBuilder();
          result.hasLegacyMessage = false;
          result.legacyMessage_ = pb::ByteString.Empty;
          return this;
        }
        
        public bool HasContent {
          get { return result.hasContent; }
        }
        public pb::ByteString Content {
          get { return result.Content; }
          set { SetContent(value); }
        }
        public Builder SetContent(pb::ByteString value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasContent = true;
          result.content_ = value;
          return this;
        }
        public Builder ClearContent() {
          PrepareBuilder();
          result.hasContent = false;
          result.content_ = pb::ByteString.Empty;
          return this;
        }
      }
      static Envelope() {
        object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Content : pb::GeneratedMessage<Content, Content.Builder> {
      private Content() { }
      private static readonly Content defaultInstance = new Content().MakeReadOnly();
      private static readonly string[] _contentFieldNames = new string[] { "dataMessage", "syncMessage" };
      private static readonly uint[] _contentFieldTags = new uint[] { 10, 18 };
      public static Content DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Content DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Content ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_Content__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Content, Content.Builder> InternalFieldAccessors {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_Content__FieldAccessorTable; }
      }
      
      public const int DataMessageFieldNumber = 1;
      private bool hasDataMessage;
      private global::libsignalservice.push.SignalServiceProtos.DataMessage dataMessage_;
      public bool HasDataMessage {
        get { return hasDataMessage; }
      }
      public global::libsignalservice.push.SignalServiceProtos.DataMessage DataMessage {
        get { return dataMessage_ ?? global::libsignalservice.push.SignalServiceProtos.DataMessage.DefaultInstance; }
      }
      
      public const int SyncMessageFieldNumber = 2;
      private bool hasSyncMessage;
      private global::libsignalservice.push.SignalServiceProtos.SyncMessage syncMessage_;
      public bool HasSyncMessage {
        get { return hasSyncMessage; }
      }
      public global::libsignalservice.push.SignalServiceProtos.SyncMessage SyncMessage {
        get { return syncMessage_ ?? global::libsignalservice.push.SignalServiceProtos.SyncMessage.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _contentFieldNames;
        if (hasDataMessage) {
          output.WriteMessage(1, field_names[0], DataMessage);
        }
        if (hasSyncMessage) {
          output.WriteMessage(2, field_names[1], SyncMessage);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDataMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, DataMessage);
        }
        if (hasSyncMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, SyncMessage);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Content ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Content ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Content ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Content ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Content ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Content ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Content ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Content ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Content ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Content ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Content MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Content prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Content, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Content cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Content result;
        
        private Content PrepareBuilder() {
          if (resultIsReadOnly) {
            Content original = result;
            result = new Content();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Content MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::libsignalservice.push.SignalServiceProtos.Content.Descriptor; }
        }
        
        public override Content DefaultInstanceForType {
          get { return global::libsignalservice.push.SignalServiceProtos.Content.DefaultInstance; }
        }
        
        public override Content BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Content) {
            return MergeFrom((Content) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Content other) {
          if (other == global::libsignalservice.push.SignalServiceProtos.Content.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasDataMessage) {
            MergeDataMessage(other.DataMessage);
          }
          if (other.HasSyncMessage) {
            MergeSyncMessage(other.SyncMessage);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_contentFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _contentFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::libsignalservice.push.SignalServiceProtos.DataMessage.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.DataMessage.CreateBuilder();
                if (result.hasDataMessage) {
                  subBuilder.MergeFrom(DataMessage);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                DataMessage = subBuilder.BuildPartial();
                break;
              }
              case 18: {
                global::libsignalservice.push.SignalServiceProtos.SyncMessage.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.SyncMessage.CreateBuilder();
                if (result.hasSyncMessage) {
                  subBuilder.MergeFrom(SyncMessage);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                SyncMessage = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasDataMessage {
         get { return result.hasDataMessage; }
        }
        public global::libsignalservice.push.SignalServiceProtos.DataMessage DataMessage {
          get { return result.DataMessage; }
          set { SetDataMessage(value); }
        }
        public Builder SetDataMessage(global::libsignalservice.push.SignalServiceProtos.DataMessage value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasDataMessage = true;
          result.dataMessage_ = value;
          return this;
        }
        public Builder SetDataMessage(global::libsignalservice.push.SignalServiceProtos.DataMessage.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasDataMessage = true;
          result.dataMessage_ = builderForValue.Build();
          return this;
        }
        public Builder MergeDataMessage(global::libsignalservice.push.SignalServiceProtos.DataMessage value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasDataMessage &&
              result.dataMessage_ != global::libsignalservice.push.SignalServiceProtos.DataMessage.DefaultInstance) {
              result.dataMessage_ = global::libsignalservice.push.SignalServiceProtos.DataMessage.CreateBuilder(result.dataMessage_).MergeFrom(value).BuildPartial();
          } else {
            result.dataMessage_ = value;
          }
          result.hasDataMessage = true;
          return this;
        }
        public Builder ClearDataMessage() {
          PrepareBuilder();
          result.hasDataMessage = false;
          result.dataMessage_ = null;
          return this;
        }
        
        public bool HasSyncMessage {
         get { return result.hasSyncMessage; }
        }
        public global::libsignalservice.push.SignalServiceProtos.SyncMessage SyncMessage {
          get { return result.SyncMessage; }
          set { SetSyncMessage(value); }
        }
        public Builder SetSyncMessage(global::libsignalservice.push.SignalServiceProtos.SyncMessage value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasSyncMessage = true;
          result.syncMessage_ = value;
          return this;
        }
        public Builder SetSyncMessage(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasSyncMessage = true;
          result.syncMessage_ = builderForValue.Build();
          return this;
        }
        public Builder MergeSyncMessage(global::libsignalservice.push.SignalServiceProtos.SyncMessage value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasSyncMessage &&
              result.syncMessage_ != global::libsignalservice.push.SignalServiceProtos.SyncMessage.DefaultInstance) {
              result.syncMessage_ = global::libsignalservice.push.SignalServiceProtos.SyncMessage.CreateBuilder(result.syncMessage_).MergeFrom(value).BuildPartial();
          } else {
            result.syncMessage_ = value;
          }
          result.hasSyncMessage = true;
          return this;
        }
        public Builder ClearSyncMessage() {
          PrepareBuilder();
          result.hasSyncMessage = false;
          result.syncMessage_ = null;
          return this;
        }
      }
      static Content() {
        object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class DataMessage : pb::GeneratedMessage<DataMessage, DataMessage.Builder> {
      private DataMessage() { }
      private static readonly DataMessage defaultInstance = new DataMessage().MakeReadOnly();
      private static readonly string[] _dataMessageFieldNames = new string[] { "attachments", "body", "expireTimer", "flags", "group" };
      private static readonly uint[] _dataMessageFieldTags = new uint[] { 18, 10, 40, 32, 26 };
      public static DataMessage DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override DataMessage DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override DataMessage ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_DataMessage__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<DataMessage, DataMessage.Builder> InternalFieldAccessors {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_DataMessage__FieldAccessorTable; }
      }
      
      #region Nested types
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        public enum Flags {
          END_SESSION = 1,
          EXPIRATION_TIMER_UPDATE = 2,
        }
        
      }
      #endregion
      
      public const int BodyFieldNumber = 1;
      private bool hasBody;
      private string body_ = "";
      public bool HasBody {
        get { return hasBody; }
      }
      public string Body {
        get { return body_; }
      }
      
      public const int AttachmentsFieldNumber = 2;
      private pbc::PopsicleList<global::libsignalservice.push.SignalServiceProtos.AttachmentPointer> attachments_ = new pbc::PopsicleList<global::libsignalservice.push.SignalServiceProtos.AttachmentPointer>();
      public scg::IList<global::libsignalservice.push.SignalServiceProtos.AttachmentPointer> AttachmentsList {
        get { return attachments_; }
      }
      public int AttachmentsCount {
        get { return attachments_.Count; }
      }
      public global::libsignalservice.push.SignalServiceProtos.AttachmentPointer GetAttachments(int index) {
        return attachments_[index];
      }
      
      public const int GroupFieldNumber = 3;
      private bool hasGroup;
      private global::libsignalservice.push.SignalServiceProtos.GroupContext group_;
      public bool HasGroup {
        get { return hasGroup; }
      }
      public global::libsignalservice.push.SignalServiceProtos.GroupContext Group {
        get { return group_ ?? global::libsignalservice.push.SignalServiceProtos.GroupContext.DefaultInstance; }
      }
      
      public const int FlagsFieldNumber = 4;
      private bool hasFlags;
      private uint flags_;
      public bool HasFlags {
        get { return hasFlags; }
      }
      [global::System.CLSCompliant(false)]
      public uint Flags {
        get { return flags_; }
      }
      
      public const int ExpireTimerFieldNumber = 5;
      private bool hasExpireTimer;
      private uint expireTimer_;
      public bool HasExpireTimer {
        get { return hasExpireTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExpireTimer {
        get { return expireTimer_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _dataMessageFieldNames;
        if (hasBody) {
          output.WriteString(1, field_names[1], Body);
        }
        if (attachments_.Count > 0) {
          output.WriteMessageArray(2, field_names[0], attachments_);
        }
        if (hasGroup) {
          output.WriteMessage(3, field_names[4], Group);
        }
        if (hasFlags) {
          output.WriteUInt32(4, field_names[3], Flags);
        }
        if (hasExpireTimer) {
          output.WriteUInt32(5, field_names[2], ExpireTimer);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBody) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Body);
        }
        foreach (global::libsignalservice.push.SignalServiceProtos.AttachmentPointer element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasGroup) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Group);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Flags);
        }
        if (hasExpireTimer) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, ExpireTimer);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static DataMessage ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static DataMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static DataMessage ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static DataMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static DataMessage ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static DataMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static DataMessage ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static DataMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static DataMessage ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static DataMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private DataMessage MakeReadOnly() {
        attachments_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(DataMessage prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<DataMessage, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(DataMessage cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private DataMessage result;
        
        private DataMessage PrepareBuilder() {
          if (resultIsReadOnly) {
            DataMessage original = result;
            result = new DataMessage();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override DataMessage MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::libsignalservice.push.SignalServiceProtos.DataMessage.Descriptor; }
        }
        
        public override DataMessage DefaultInstanceForType {
          get { return global::libsignalservice.push.SignalServiceProtos.DataMessage.DefaultInstance; }
        }
        
        public override DataMessage BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is DataMessage) {
            return MergeFrom((DataMessage) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(DataMessage other) {
          if (other == global::libsignalservice.push.SignalServiceProtos.DataMessage.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasBody) {
            Body = other.Body;
          }
          if (other.attachments_.Count != 0) {
            result.attachments_.Add(other.attachments_);
          }
          if (other.HasGroup) {
            MergeGroup(other.Group);
          }
          if (other.HasFlags) {
            Flags = other.Flags;
          }
          if (other.HasExpireTimer) {
            ExpireTimer = other.ExpireTimer;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_dataMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _dataMessageFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasBody = input.ReadString(ref result.body_);
                break;
              }
              case 18: {
                input.ReadMessageArray(tag, field_name, result.attachments_, global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.DefaultInstance, extensionRegistry);
                break;
              }
              case 26: {
                global::libsignalservice.push.SignalServiceProtos.GroupContext.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.GroupContext.CreateBuilder();
                if (result.hasGroup) {
                  subBuilder.MergeFrom(Group);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Group = subBuilder.BuildPartial();
                break;
              }
              case 32: {
                result.hasFlags = input.ReadUInt32(ref result.flags_);
                break;
              }
              case 40: {
                result.hasExpireTimer = input.ReadUInt32(ref result.expireTimer_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasBody {
          get { return result.hasBody; }
        }
        public string Body {
          get { return result.Body; }
          set { SetBody(value); }
        }
        public Builder SetBody(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasBody = true;
          result.body_ = value;
          return this;
        }
        public Builder ClearBody() {
          PrepareBuilder();
          result.hasBody = false;
          result.body_ = "";
          return this;
        }
        
        public pbc::IPopsicleList<global::libsignalservice.push.SignalServiceProtos.AttachmentPointer> AttachmentsList {
          get { return PrepareBuilder().attachments_; }
        }
        public int AttachmentsCount {
          get { return result.AttachmentsCount; }
        }
        public global::libsignalservice.push.SignalServiceProtos.AttachmentPointer GetAttachments(int index) {
          return result.GetAttachments(index);
        }
        public Builder SetAttachments(int index, global::libsignalservice.push.SignalServiceProtos.AttachmentPointer value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.attachments_[index] = value;
          return this;
        }
        public Builder SetAttachments(int index, global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.attachments_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddAttachments(global::libsignalservice.push.SignalServiceProtos.AttachmentPointer value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.attachments_.Add(value);
          return this;
        }
        public Builder AddAttachments(global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.attachments_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeAttachments(scg::IEnumerable<global::libsignalservice.push.SignalServiceProtos.AttachmentPointer> values) {
          PrepareBuilder();
          result.attachments_.Add(values);
          return this;
        }
        public Builder ClearAttachments() {
          PrepareBuilder();
          result.attachments_.Clear();
          return this;
        }
        
        public bool HasGroup {
         get { return result.hasGroup; }
        }
        public global::libsignalservice.push.SignalServiceProtos.GroupContext Group {
          get { return result.Group; }
          set { SetGroup(value); }
        }
        public Builder SetGroup(global::libsignalservice.push.SignalServiceProtos.GroupContext value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasGroup = true;
          result.group_ = value;
          return this;
        }
        public Builder SetGroup(global::libsignalservice.push.SignalServiceProtos.GroupContext.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasGroup = true;
          result.group_ = builderForValue.Build();
          return this;
        }
        public Builder MergeGroup(global::libsignalservice.push.SignalServiceProtos.GroupContext value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasGroup &&
              result.group_ != global::libsignalservice.push.SignalServiceProtos.GroupContext.DefaultInstance) {
              result.group_ = global::libsignalservice.push.SignalServiceProtos.GroupContext.CreateBuilder(result.group_).MergeFrom(value).BuildPartial();
          } else {
            result.group_ = value;
          }
          result.hasGroup = true;
          return this;
        }
        public Builder ClearGroup() {
          PrepareBuilder();
          result.hasGroup = false;
          result.group_ = null;
          return this;
        }
        
        public bool HasFlags {
          get { return result.hasFlags; }
        }
        [global::System.CLSCompliant(false)]
        public uint Flags {
          get { return result.Flags; }
          set { SetFlags(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetFlags(uint value) {
          PrepareBuilder();
          result.hasFlags = true;
          result.flags_ = value;
          return this;
        }
        public Builder ClearFlags() {
          PrepareBuilder();
          result.hasFlags = false;
          result.flags_ = 0;
          return this;
        }
        
        public bool HasExpireTimer {
          get { return result.hasExpireTimer; }
        }
        [global::System.CLSCompliant(false)]
        public uint ExpireTimer {
          get { return result.ExpireTimer; }
          set { SetExpireTimer(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetExpireTimer(uint value) {
          PrepareBuilder();
          result.hasExpireTimer = true;
          result.expireTimer_ = value;
          return this;
        }
        public Builder ClearExpireTimer() {
          PrepareBuilder();
          result.hasExpireTimer = false;
          result.expireTimer_ = 0;
          return this;
        }
      }
      static DataMessage() {
        object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SyncMessage : pb::GeneratedMessage<SyncMessage, SyncMessage.Builder> {
      private SyncMessage() { }
      private static readonly SyncMessage defaultInstance = new SyncMessage().MakeReadOnly();
      private static readonly string[] _syncMessageFieldNames = new string[] { "blocked", "contacts", "groups", "read", "request", "sent" };
      private static readonly uint[] _syncMessageFieldTags = new uint[] { 50, 18, 26, 42, 34, 10 };
      public static SyncMessage DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override SyncMessage DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override SyncMessage ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<SyncMessage, SyncMessage.Builder> InternalFieldAccessors {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage__FieldAccessorTable; }
      }
      
      #region Nested types
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Sent : pb::GeneratedMessage<Sent, Sent.Builder> {
          private Sent() { }
          private static readonly Sent defaultInstance = new Sent().MakeReadOnly();
          private static readonly string[] _sentFieldNames = new string[] { "destination", "expirationStartTimestamp", "message", "timestamp" };
          private static readonly uint[] _sentFieldTags = new uint[] { 10, 32, 26, 16 };
          public static Sent DefaultInstance {
            get { return defaultInstance; }
          }
          
          public override Sent DefaultInstanceForType {
            get { return DefaultInstance; }
          }
          
          protected override Sent ThisMessage {
            get { return this; }
          }
          
          public static pbd::MessageDescriptor Descriptor {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Sent__Descriptor; }
          }
          
          protected override pb::FieldAccess.FieldAccessorTable<Sent, Sent.Builder> InternalFieldAccessors {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Sent__FieldAccessorTable; }
          }
          
          public const int DestinationFieldNumber = 1;
          private bool hasDestination;
          private string destination_ = "";
          public bool HasDestination {
            get { return hasDestination; }
          }
          public string Destination {
            get { return destination_; }
          }
          
          public const int TimestampFieldNumber = 2;
          private bool hasTimestamp;
          private ulong timestamp_;
          public bool HasTimestamp {
            get { return hasTimestamp; }
          }
          [global::System.CLSCompliant(false)]
          public ulong Timestamp {
            get { return timestamp_; }
          }
          
          public const int MessageFieldNumber = 3;
          private bool hasMessage;
          private global::libsignalservice.push.SignalServiceProtos.DataMessage message_;
          public bool HasMessage {
            get { return hasMessage; }
          }
          public global::libsignalservice.push.SignalServiceProtos.DataMessage Message {
            get { return message_ ?? global::libsignalservice.push.SignalServiceProtos.DataMessage.DefaultInstance; }
          }
          
          public const int ExpirationStartTimestampFieldNumber = 4;
          private bool hasExpirationStartTimestamp;
          private ulong expirationStartTimestamp_;
          public bool HasExpirationStartTimestamp {
            get { return hasExpirationStartTimestamp; }
          }
          [global::System.CLSCompliant(false)]
          public ulong ExpirationStartTimestamp {
            get { return expirationStartTimestamp_; }
          }
          
          public override bool IsInitialized {
            get {
              return true;
            }
          }
          
          public override void WriteTo(pb::ICodedOutputStream output) {
            CalcSerializedSize();
            string[] field_names = _sentFieldNames;
            if (hasDestination) {
              output.WriteString(1, field_names[0], Destination);
            }
            if (hasTimestamp) {
              output.WriteUInt64(2, field_names[3], Timestamp);
            }
            if (hasMessage) {
              output.WriteMessage(3, field_names[2], Message);
            }
            if (hasExpirationStartTimestamp) {
              output.WriteUInt64(4, field_names[1], ExpirationStartTimestamp);
            }
            UnknownFields.WriteTo(output);
          }
          
          private int memoizedSerializedSize = -1;
          public override int SerializedSize {
            get {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              return CalcSerializedSize();
            }
          }
          
          private int CalcSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasDestination) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Destination);
            }
            if (hasTimestamp) {
              size += pb::CodedOutputStream.ComputeUInt64Size(2, Timestamp);
            }
            if (hasMessage) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, Message);
            }
            if (hasExpirationStartTimestamp) {
              size += pb::CodedOutputStream.ComputeUInt64Size(4, ExpirationStartTimestamp);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
          public static Sent ParseFrom(pb::ByteString data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Sent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Sent ParseFrom(byte[] data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Sent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Sent ParseFrom(global::System.IO.Stream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Sent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          public static Sent ParseDelimitedFrom(global::System.IO.Stream input) {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
          }
          public static Sent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
          }
          public static Sent ParseFrom(pb::ICodedInputStream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Sent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          private Sent MakeReadOnly() {
            return this;
          }
          
          public static Builder CreateBuilder() { return new Builder(); }
          public override Builder ToBuilder() { return CreateBuilder(this); }
          public override Builder CreateBuilderForType() { return new Builder(); }
          public static Builder CreateBuilder(Sent prototype) {
            return new Builder(prototype);
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Builder : pb::GeneratedBuilder<Sent, Builder> {
            protected override Builder ThisBuilder {
              get { return this; }
            }
            public Builder() {
              result = DefaultInstance;
              resultIsReadOnly = true;
            }
            internal Builder(Sent cloneFrom) {
              result = cloneFrom;
              resultIsReadOnly = true;
            }
            
            private bool resultIsReadOnly;
            private Sent result;
            
            private Sent PrepareBuilder() {
              if (resultIsReadOnly) {
                Sent original = result;
                result = new Sent();
                resultIsReadOnly = false;
                MergeFrom(original);
              }
              return result;
            }
            
            public override bool IsInitialized {
              get { return result.IsInitialized; }
            }
            
            protected override Sent MessageBeingBuilt {
              get { return PrepareBuilder(); }
            }
            
            public override Builder Clear() {
              result = DefaultInstance;
              resultIsReadOnly = true;
              return this;
            }
            
            public override Builder Clone() {
              if (resultIsReadOnly) {
                return new Builder(result);
              } else {
                return new Builder().MergeFrom(result);
              }
            }
            
            public override pbd::MessageDescriptor DescriptorForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent.Descriptor; }
            }
            
            public override Sent DefaultInstanceForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent.DefaultInstance; }
            }
            
            public override Sent BuildPartial() {
              if (resultIsReadOnly) {
                return result;
              }
              resultIsReadOnly = true;
              return result.MakeReadOnly();
            }
            
            public override Builder MergeFrom(pb::IMessage other) {
              if (other is Sent) {
                return MergeFrom((Sent) other);
              } else {
                base.MergeFrom(other);
                return this;
              }
            }
            
            public override Builder MergeFrom(Sent other) {
              if (other == global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent.DefaultInstance) return this;
              PrepareBuilder();
              if (other.HasDestination) {
                Destination = other.Destination;
              }
              if (other.HasTimestamp) {
                Timestamp = other.Timestamp;
              }
              if (other.HasMessage) {
                MergeMessage(other.Message);
              }
              if (other.HasExpirationStartTimestamp) {
                ExpirationStartTimestamp = other.ExpirationStartTimestamp;
              }
              this.MergeUnknownFields(other.UnknownFields);
              return this;
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input) {
              return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              PrepareBuilder();
              pb::UnknownFieldSet.Builder unknownFields = null;
              uint tag;
              string field_name;
              while (input.ReadTag(out tag, out field_name)) {
                if(tag == 0 && field_name != null) {
                  int field_ordinal = global::System.Array.BinarySearch(_sentFieldNames, field_name, global::System.StringComparer.Ordinal);
                  if(field_ordinal >= 0)
                    tag = _sentFieldTags[field_ordinal];
                  else {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    continue;
                  }
                }
                switch (tag) {
                  case 0: {
                    throw pb::InvalidProtocolBufferException.InvalidTag();
                  }
                  default: {
                    if (pb::WireFormat.IsEndGroupTag(tag)) {
                      if (unknownFields != null) {
                        this.UnknownFields = unknownFields.Build();
                      }
                      return this;
                    }
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    break;
                  }
                  case 10: {
                    result.hasDestination = input.ReadString(ref result.destination_);
                    break;
                  }
                  case 16: {
                    result.hasTimestamp = input.ReadUInt64(ref result.timestamp_);
                    break;
                  }
                  case 26: {
                    global::libsignalservice.push.SignalServiceProtos.DataMessage.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.DataMessage.CreateBuilder();
                    if (result.hasMessage) {
                      subBuilder.MergeFrom(Message);
                    }
                    input.ReadMessage(subBuilder, extensionRegistry);
                    Message = subBuilder.BuildPartial();
                    break;
                  }
                  case 32: {
                    result.hasExpirationStartTimestamp = input.ReadUInt64(ref result.expirationStartTimestamp_);
                    break;
                  }
                }
              }
              
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            
            
            public bool HasDestination {
              get { return result.hasDestination; }
            }
            public string Destination {
              get { return result.Destination; }
              set { SetDestination(value); }
            }
            public Builder SetDestination(string value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              result.hasDestination = true;
              result.destination_ = value;
              return this;
            }
            public Builder ClearDestination() {
              PrepareBuilder();
              result.hasDestination = false;
              result.destination_ = "";
              return this;
            }
            
            public bool HasTimestamp {
              get { return result.hasTimestamp; }
            }
            [global::System.CLSCompliant(false)]
            public ulong Timestamp {
              get { return result.Timestamp; }
              set { SetTimestamp(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetTimestamp(ulong value) {
              PrepareBuilder();
              result.hasTimestamp = true;
              result.timestamp_ = value;
              return this;
            }
            public Builder ClearTimestamp() {
              PrepareBuilder();
              result.hasTimestamp = false;
              result.timestamp_ = 0UL;
              return this;
            }
            
            public bool HasMessage {
             get { return result.hasMessage; }
            }
            public global::libsignalservice.push.SignalServiceProtos.DataMessage Message {
              get { return result.Message; }
              set { SetMessage(value); }
            }
            public Builder SetMessage(global::libsignalservice.push.SignalServiceProtos.DataMessage value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              result.hasMessage = true;
              result.message_ = value;
              return this;
            }
            public Builder SetMessage(global::libsignalservice.push.SignalServiceProtos.DataMessage.Builder builderForValue) {
              pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
              PrepareBuilder();
              result.hasMessage = true;
              result.message_ = builderForValue.Build();
              return this;
            }
            public Builder MergeMessage(global::libsignalservice.push.SignalServiceProtos.DataMessage value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              if (result.hasMessage &&
                  result.message_ != global::libsignalservice.push.SignalServiceProtos.DataMessage.DefaultInstance) {
                  result.message_ = global::libsignalservice.push.SignalServiceProtos.DataMessage.CreateBuilder(result.message_).MergeFrom(value).BuildPartial();
              } else {
                result.message_ = value;
              }
              result.hasMessage = true;
              return this;
            }
            public Builder ClearMessage() {
              PrepareBuilder();
              result.hasMessage = false;
              result.message_ = null;
              return this;
            }
            
            public bool HasExpirationStartTimestamp {
              get { return result.hasExpirationStartTimestamp; }
            }
            [global::System.CLSCompliant(false)]
            public ulong ExpirationStartTimestamp {
              get { return result.ExpirationStartTimestamp; }
              set { SetExpirationStartTimestamp(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetExpirationStartTimestamp(ulong value) {
              PrepareBuilder();
              result.hasExpirationStartTimestamp = true;
              result.expirationStartTimestamp_ = value;
              return this;
            }
            public Builder ClearExpirationStartTimestamp() {
              PrepareBuilder();
              result.hasExpirationStartTimestamp = false;
              result.expirationStartTimestamp_ = 0UL;
              return this;
            }
          }
          static Sent() {
            object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
          }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Contacts : pb::GeneratedMessage<Contacts, Contacts.Builder> {
          private Contacts() { }
          private static readonly Contacts defaultInstance = new Contacts().MakeReadOnly();
          private static readonly string[] _contactsFieldNames = new string[] { "blob" };
          private static readonly uint[] _contactsFieldTags = new uint[] { 10 };
          public static Contacts DefaultInstance {
            get { return defaultInstance; }
          }
          
          public override Contacts DefaultInstanceForType {
            get { return DefaultInstance; }
          }
          
          protected override Contacts ThisMessage {
            get { return this; }
          }
          
          public static pbd::MessageDescriptor Descriptor {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Contacts__Descriptor; }
          }
          
          protected override pb::FieldAccess.FieldAccessorTable<Contacts, Contacts.Builder> InternalFieldAccessors {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Contacts__FieldAccessorTable; }
          }
          
          public const int BlobFieldNumber = 1;
          private bool hasBlob;
          private global::libsignalservice.push.SignalServiceProtos.AttachmentPointer blob_;
          public bool HasBlob {
            get { return hasBlob; }
          }
          public global::libsignalservice.push.SignalServiceProtos.AttachmentPointer Blob {
            get { return blob_ ?? global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.DefaultInstance; }
          }
          
          public override bool IsInitialized {
            get {
              return true;
            }
          }
          
          public override void WriteTo(pb::ICodedOutputStream output) {
            CalcSerializedSize();
            string[] field_names = _contactsFieldNames;
            if (hasBlob) {
              output.WriteMessage(1, field_names[0], Blob);
            }
            UnknownFields.WriteTo(output);
          }
          
          private int memoizedSerializedSize = -1;
          public override int SerializedSize {
            get {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              return CalcSerializedSize();
            }
          }
          
          private int CalcSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasBlob) {
              size += pb::CodedOutputStream.ComputeMessageSize(1, Blob);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
          public static Contacts ParseFrom(pb::ByteString data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Contacts ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Contacts ParseFrom(byte[] data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Contacts ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Contacts ParseFrom(global::System.IO.Stream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Contacts ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          public static Contacts ParseDelimitedFrom(global::System.IO.Stream input) {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
          }
          public static Contacts ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
          }
          public static Contacts ParseFrom(pb::ICodedInputStream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Contacts ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          private Contacts MakeReadOnly() {
            return this;
          }
          
          public static Builder CreateBuilder() { return new Builder(); }
          public override Builder ToBuilder() { return CreateBuilder(this); }
          public override Builder CreateBuilderForType() { return new Builder(); }
          public static Builder CreateBuilder(Contacts prototype) {
            return new Builder(prototype);
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Builder : pb::GeneratedBuilder<Contacts, Builder> {
            protected override Builder ThisBuilder {
              get { return this; }
            }
            public Builder() {
              result = DefaultInstance;
              resultIsReadOnly = true;
            }
            internal Builder(Contacts cloneFrom) {
              result = cloneFrom;
              resultIsReadOnly = true;
            }
            
            private bool resultIsReadOnly;
            private Contacts result;
            
            private Contacts PrepareBuilder() {
              if (resultIsReadOnly) {
                Contacts original = result;
                result = new Contacts();
                resultIsReadOnly = false;
                MergeFrom(original);
              }
              return result;
            }
            
            public override bool IsInitialized {
              get { return result.IsInitialized; }
            }
            
            protected override Contacts MessageBeingBuilt {
              get { return PrepareBuilder(); }
            }
            
            public override Builder Clear() {
              result = DefaultInstance;
              resultIsReadOnly = true;
              return this;
            }
            
            public override Builder Clone() {
              if (resultIsReadOnly) {
                return new Builder(result);
              } else {
                return new Builder().MergeFrom(result);
              }
            }
            
            public override pbd::MessageDescriptor DescriptorForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts.Descriptor; }
            }
            
            public override Contacts DefaultInstanceForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts.DefaultInstance; }
            }
            
            public override Contacts BuildPartial() {
              if (resultIsReadOnly) {
                return result;
              }
              resultIsReadOnly = true;
              return result.MakeReadOnly();
            }
            
            public override Builder MergeFrom(pb::IMessage other) {
              if (other is Contacts) {
                return MergeFrom((Contacts) other);
              } else {
                base.MergeFrom(other);
                return this;
              }
            }
            
            public override Builder MergeFrom(Contacts other) {
              if (other == global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts.DefaultInstance) return this;
              PrepareBuilder();
              if (other.HasBlob) {
                MergeBlob(other.Blob);
              }
              this.MergeUnknownFields(other.UnknownFields);
              return this;
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input) {
              return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              PrepareBuilder();
              pb::UnknownFieldSet.Builder unknownFields = null;
              uint tag;
              string field_name;
              while (input.ReadTag(out tag, out field_name)) {
                if(tag == 0 && field_name != null) {
                  int field_ordinal = global::System.Array.BinarySearch(_contactsFieldNames, field_name, global::System.StringComparer.Ordinal);
                  if(field_ordinal >= 0)
                    tag = _contactsFieldTags[field_ordinal];
                  else {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    continue;
                  }
                }
                switch (tag) {
                  case 0: {
                    throw pb::InvalidProtocolBufferException.InvalidTag();
                  }
                  default: {
                    if (pb::WireFormat.IsEndGroupTag(tag)) {
                      if (unknownFields != null) {
                        this.UnknownFields = unknownFields.Build();
                      }
                      return this;
                    }
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    break;
                  }
                  case 10: {
                    global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.CreateBuilder();
                    if (result.hasBlob) {
                      subBuilder.MergeFrom(Blob);
                    }
                    input.ReadMessage(subBuilder, extensionRegistry);
                    Blob = subBuilder.BuildPartial();
                    break;
                  }
                }
              }
              
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            
            
            public bool HasBlob {
             get { return result.hasBlob; }
            }
            public global::libsignalservice.push.SignalServiceProtos.AttachmentPointer Blob {
              get { return result.Blob; }
              set { SetBlob(value); }
            }
            public Builder SetBlob(global::libsignalservice.push.SignalServiceProtos.AttachmentPointer value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              result.hasBlob = true;
              result.blob_ = value;
              return this;
            }
            public Builder SetBlob(global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.Builder builderForValue) {
              pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
              PrepareBuilder();
              result.hasBlob = true;
              result.blob_ = builderForValue.Build();
              return this;
            }
            public Builder MergeBlob(global::libsignalservice.push.SignalServiceProtos.AttachmentPointer value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              if (result.hasBlob &&
                  result.blob_ != global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.DefaultInstance) {
                  result.blob_ = global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.CreateBuilder(result.blob_).MergeFrom(value).BuildPartial();
              } else {
                result.blob_ = value;
              }
              result.hasBlob = true;
              return this;
            }
            public Builder ClearBlob() {
              PrepareBuilder();
              result.hasBlob = false;
              result.blob_ = null;
              return this;
            }
          }
          static Contacts() {
            object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
          }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Groups : pb::GeneratedMessage<Groups, Groups.Builder> {
          private Groups() { }
          private static readonly Groups defaultInstance = new Groups().MakeReadOnly();
          private static readonly string[] _groupsFieldNames = new string[] { "blob" };
          private static readonly uint[] _groupsFieldTags = new uint[] { 10 };
          public static Groups DefaultInstance {
            get { return defaultInstance; }
          }
          
          public override Groups DefaultInstanceForType {
            get { return DefaultInstance; }
          }
          
          protected override Groups ThisMessage {
            get { return this; }
          }
          
          public static pbd::MessageDescriptor Descriptor {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Groups__Descriptor; }
          }
          
          protected override pb::FieldAccess.FieldAccessorTable<Groups, Groups.Builder> InternalFieldAccessors {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Groups__FieldAccessorTable; }
          }
          
          public const int BlobFieldNumber = 1;
          private bool hasBlob;
          private global::libsignalservice.push.SignalServiceProtos.AttachmentPointer blob_;
          public bool HasBlob {
            get { return hasBlob; }
          }
          public global::libsignalservice.push.SignalServiceProtos.AttachmentPointer Blob {
            get { return blob_ ?? global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.DefaultInstance; }
          }
          
          public override bool IsInitialized {
            get {
              return true;
            }
          }
          
          public override void WriteTo(pb::ICodedOutputStream output) {
            CalcSerializedSize();
            string[] field_names = _groupsFieldNames;
            if (hasBlob) {
              output.WriteMessage(1, field_names[0], Blob);
            }
            UnknownFields.WriteTo(output);
          }
          
          private int memoizedSerializedSize = -1;
          public override int SerializedSize {
            get {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              return CalcSerializedSize();
            }
          }
          
          private int CalcSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasBlob) {
              size += pb::CodedOutputStream.ComputeMessageSize(1, Blob);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
          public static Groups ParseFrom(pb::ByteString data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Groups ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Groups ParseFrom(byte[] data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Groups ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Groups ParseFrom(global::System.IO.Stream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Groups ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          public static Groups ParseDelimitedFrom(global::System.IO.Stream input) {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
          }
          public static Groups ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
          }
          public static Groups ParseFrom(pb::ICodedInputStream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Groups ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          private Groups MakeReadOnly() {
            return this;
          }
          
          public static Builder CreateBuilder() { return new Builder(); }
          public override Builder ToBuilder() { return CreateBuilder(this); }
          public override Builder CreateBuilderForType() { return new Builder(); }
          public static Builder CreateBuilder(Groups prototype) {
            return new Builder(prototype);
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Builder : pb::GeneratedBuilder<Groups, Builder> {
            protected override Builder ThisBuilder {
              get { return this; }
            }
            public Builder() {
              result = DefaultInstance;
              resultIsReadOnly = true;
            }
            internal Builder(Groups cloneFrom) {
              result = cloneFrom;
              resultIsReadOnly = true;
            }
            
            private bool resultIsReadOnly;
            private Groups result;
            
            private Groups PrepareBuilder() {
              if (resultIsReadOnly) {
                Groups original = result;
                result = new Groups();
                resultIsReadOnly = false;
                MergeFrom(original);
              }
              return result;
            }
            
            public override bool IsInitialized {
              get { return result.IsInitialized; }
            }
            
            protected override Groups MessageBeingBuilt {
              get { return PrepareBuilder(); }
            }
            
            public override Builder Clear() {
              result = DefaultInstance;
              resultIsReadOnly = true;
              return this;
            }
            
            public override Builder Clone() {
              if (resultIsReadOnly) {
                return new Builder(result);
              } else {
                return new Builder().MergeFrom(result);
              }
            }
            
            public override pbd::MessageDescriptor DescriptorForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups.Descriptor; }
            }
            
            public override Groups DefaultInstanceForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups.DefaultInstance; }
            }
            
            public override Groups BuildPartial() {
              if (resultIsReadOnly) {
                return result;
              }
              resultIsReadOnly = true;
              return result.MakeReadOnly();
            }
            
            public override Builder MergeFrom(pb::IMessage other) {
              if (other is Groups) {
                return MergeFrom((Groups) other);
              } else {
                base.MergeFrom(other);
                return this;
              }
            }
            
            public override Builder MergeFrom(Groups other) {
              if (other == global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups.DefaultInstance) return this;
              PrepareBuilder();
              if (other.HasBlob) {
                MergeBlob(other.Blob);
              }
              this.MergeUnknownFields(other.UnknownFields);
              return this;
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input) {
              return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              PrepareBuilder();
              pb::UnknownFieldSet.Builder unknownFields = null;
              uint tag;
              string field_name;
              while (input.ReadTag(out tag, out field_name)) {
                if(tag == 0 && field_name != null) {
                  int field_ordinal = global::System.Array.BinarySearch(_groupsFieldNames, field_name, global::System.StringComparer.Ordinal);
                  if(field_ordinal >= 0)
                    tag = _groupsFieldTags[field_ordinal];
                  else {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    continue;
                  }
                }
                switch (tag) {
                  case 0: {
                    throw pb::InvalidProtocolBufferException.InvalidTag();
                  }
                  default: {
                    if (pb::WireFormat.IsEndGroupTag(tag)) {
                      if (unknownFields != null) {
                        this.UnknownFields = unknownFields.Build();
                      }
                      return this;
                    }
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    break;
                  }
                  case 10: {
                    global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.CreateBuilder();
                    if (result.hasBlob) {
                      subBuilder.MergeFrom(Blob);
                    }
                    input.ReadMessage(subBuilder, extensionRegistry);
                    Blob = subBuilder.BuildPartial();
                    break;
                  }
                }
              }
              
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            
            
            public bool HasBlob {
             get { return result.hasBlob; }
            }
            public global::libsignalservice.push.SignalServiceProtos.AttachmentPointer Blob {
              get { return result.Blob; }
              set { SetBlob(value); }
            }
            public Builder SetBlob(global::libsignalservice.push.SignalServiceProtos.AttachmentPointer value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              result.hasBlob = true;
              result.blob_ = value;
              return this;
            }
            public Builder SetBlob(global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.Builder builderForValue) {
              pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
              PrepareBuilder();
              result.hasBlob = true;
              result.blob_ = builderForValue.Build();
              return this;
            }
            public Builder MergeBlob(global::libsignalservice.push.SignalServiceProtos.AttachmentPointer value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              if (result.hasBlob &&
                  result.blob_ != global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.DefaultInstance) {
                  result.blob_ = global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.CreateBuilder(result.blob_).MergeFrom(value).BuildPartial();
              } else {
                result.blob_ = value;
              }
              result.hasBlob = true;
              return this;
            }
            public Builder ClearBlob() {
              PrepareBuilder();
              result.hasBlob = false;
              result.blob_ = null;
              return this;
            }
          }
          static Groups() {
            object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
          }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Blocked : pb::GeneratedMessage<Blocked, Blocked.Builder> {
          private Blocked() { }
          private static readonly Blocked defaultInstance = new Blocked().MakeReadOnly();
          private static readonly string[] _blockedFieldNames = new string[] { "numbers" };
          private static readonly uint[] _blockedFieldTags = new uint[] { 10 };
          public static Blocked DefaultInstance {
            get { return defaultInstance; }
          }
          
          public override Blocked DefaultInstanceForType {
            get { return DefaultInstance; }
          }
          
          protected override Blocked ThisMessage {
            get { return this; }
          }
          
          public static pbd::MessageDescriptor Descriptor {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Blocked__Descriptor; }
          }
          
          protected override pb::FieldAccess.FieldAccessorTable<Blocked, Blocked.Builder> InternalFieldAccessors {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Blocked__FieldAccessorTable; }
          }
          
          public const int NumbersFieldNumber = 1;
          private pbc::PopsicleList<string> numbers_ = new pbc::PopsicleList<string>();
          public scg::IList<string> NumbersList {
            get { return pbc::Lists.AsReadOnly(numbers_); }
          }
          public int NumbersCount {
            get { return numbers_.Count; }
          }
          public string GetNumbers(int index) {
            return numbers_[index];
          }
          
          public override bool IsInitialized {
            get {
              return true;
            }
          }
          
          public override void WriteTo(pb::ICodedOutputStream output) {
            CalcSerializedSize();
            string[] field_names = _blockedFieldNames;
            if (numbers_.Count > 0) {
              output.WriteStringArray(1, field_names[0], numbers_);
            }
            UnknownFields.WriteTo(output);
          }
          
          private int memoizedSerializedSize = -1;
          public override int SerializedSize {
            get {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              return CalcSerializedSize();
            }
          }
          
          private int CalcSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            {
              int dataSize = 0;
              foreach (string element in NumbersList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * numbers_.Count;
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
          public static Blocked ParseFrom(pb::ByteString data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Blocked ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Blocked ParseFrom(byte[] data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Blocked ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Blocked ParseFrom(global::System.IO.Stream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Blocked ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          public static Blocked ParseDelimitedFrom(global::System.IO.Stream input) {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
          }
          public static Blocked ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
          }
          public static Blocked ParseFrom(pb::ICodedInputStream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Blocked ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          private Blocked MakeReadOnly() {
            numbers_.MakeReadOnly();
            return this;
          }
          
          public static Builder CreateBuilder() { return new Builder(); }
          public override Builder ToBuilder() { return CreateBuilder(this); }
          public override Builder CreateBuilderForType() { return new Builder(); }
          public static Builder CreateBuilder(Blocked prototype) {
            return new Builder(prototype);
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Builder : pb::GeneratedBuilder<Blocked, Builder> {
            protected override Builder ThisBuilder {
              get { return this; }
            }
            public Builder() {
              result = DefaultInstance;
              resultIsReadOnly = true;
            }
            internal Builder(Blocked cloneFrom) {
              result = cloneFrom;
              resultIsReadOnly = true;
            }
            
            private bool resultIsReadOnly;
            private Blocked result;
            
            private Blocked PrepareBuilder() {
              if (resultIsReadOnly) {
                Blocked original = result;
                result = new Blocked();
                resultIsReadOnly = false;
                MergeFrom(original);
              }
              return result;
            }
            
            public override bool IsInitialized {
              get { return result.IsInitialized; }
            }
            
            protected override Blocked MessageBeingBuilt {
              get { return PrepareBuilder(); }
            }
            
            public override Builder Clear() {
              result = DefaultInstance;
              resultIsReadOnly = true;
              return this;
            }
            
            public override Builder Clone() {
              if (resultIsReadOnly) {
                return new Builder(result);
              } else {
                return new Builder().MergeFrom(result);
              }
            }
            
            public override pbd::MessageDescriptor DescriptorForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked.Descriptor; }
            }
            
            public override Blocked DefaultInstanceForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked.DefaultInstance; }
            }
            
            public override Blocked BuildPartial() {
              if (resultIsReadOnly) {
                return result;
              }
              resultIsReadOnly = true;
              return result.MakeReadOnly();
            }
            
            public override Builder MergeFrom(pb::IMessage other) {
              if (other is Blocked) {
                return MergeFrom((Blocked) other);
              } else {
                base.MergeFrom(other);
                return this;
              }
            }
            
            public override Builder MergeFrom(Blocked other) {
              if (other == global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked.DefaultInstance) return this;
              PrepareBuilder();
              if (other.numbers_.Count != 0) {
                result.numbers_.Add(other.numbers_);
              }
              this.MergeUnknownFields(other.UnknownFields);
              return this;
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input) {
              return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              PrepareBuilder();
              pb::UnknownFieldSet.Builder unknownFields = null;
              uint tag;
              string field_name;
              while (input.ReadTag(out tag, out field_name)) {
                if(tag == 0 && field_name != null) {
                  int field_ordinal = global::System.Array.BinarySearch(_blockedFieldNames, field_name, global::System.StringComparer.Ordinal);
                  if(field_ordinal >= 0)
                    tag = _blockedFieldTags[field_ordinal];
                  else {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    continue;
                  }
                }
                switch (tag) {
                  case 0: {
                    throw pb::InvalidProtocolBufferException.InvalidTag();
                  }
                  default: {
                    if (pb::WireFormat.IsEndGroupTag(tag)) {
                      if (unknownFields != null) {
                        this.UnknownFields = unknownFields.Build();
                      }
                      return this;
                    }
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    break;
                  }
                  case 10: {
                    input.ReadStringArray(tag, field_name, result.numbers_);
                    break;
                  }
                }
              }
              
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            
            
            public pbc::IPopsicleList<string> NumbersList {
              get { return PrepareBuilder().numbers_; }
            }
            public int NumbersCount {
              get { return result.NumbersCount; }
            }
            public string GetNumbers(int index) {
              return result.GetNumbers(index);
            }
            public Builder SetNumbers(int index, string value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              result.numbers_[index] = value;
              return this;
            }
            public Builder AddNumbers(string value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              result.numbers_.Add(value);
              return this;
            }
            public Builder AddRangeNumbers(scg::IEnumerable<string> values) {
              PrepareBuilder();
              result.numbers_.Add(values);
              return this;
            }
            public Builder ClearNumbers() {
              PrepareBuilder();
              result.numbers_.Clear();
              return this;
            }
          }
          static Blocked() {
            object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
          }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
          private Request() { }
          private static readonly Request defaultInstance = new Request().MakeReadOnly();
          private static readonly string[] _requestFieldNames = new string[] { "type" };
          private static readonly uint[] _requestFieldTags = new uint[] { 8 };
          public static Request DefaultInstance {
            get { return defaultInstance; }
          }
          
          public override Request DefaultInstanceForType {
            get { return DefaultInstance; }
          }
          
          protected override Request ThisMessage {
            get { return this; }
          }
          
          public static pbd::MessageDescriptor Descriptor {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Request__Descriptor; }
          }
          
          protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Request__FieldAccessorTable; }
          }
          
          #region Nested types
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public static partial class Types {
            public enum Type {
              UNKNOWN = 0,
              CONTACTS = 1,
              GROUPS = 2,
              BLOCKED = 3,
            }
            
          }
          #endregion
          
          public const int TypeFieldNumber = 1;
          private bool hasType;
          private global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.Types.Type type_ = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.Types.Type.UNKNOWN;
          public bool HasType {
            get { return hasType; }
          }
          public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.Types.Type Type {
            get { return type_; }
          }
          
          public override bool IsInitialized {
            get {
              return true;
            }
          }
          
          public override void WriteTo(pb::ICodedOutputStream output) {
            CalcSerializedSize();
            string[] field_names = _requestFieldNames;
            if (hasType) {
              output.WriteEnum(1, field_names[0], (int) Type, Type);
            }
            UnknownFields.WriteTo(output);
          }
          
          private int memoizedSerializedSize = -1;
          public override int SerializedSize {
            get {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              return CalcSerializedSize();
            }
          }
          
          private int CalcSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasType) {
              size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
          public static Request ParseFrom(pb::ByteString data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Request ParseFrom(byte[] data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Request ParseFrom(global::System.IO.Stream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
          }
          public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
          }
          public static Request ParseFrom(pb::ICodedInputStream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          private Request MakeReadOnly() {
            return this;
          }
          
          public static Builder CreateBuilder() { return new Builder(); }
          public override Builder ToBuilder() { return CreateBuilder(this); }
          public override Builder CreateBuilderForType() { return new Builder(); }
          public static Builder CreateBuilder(Request prototype) {
            return new Builder(prototype);
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
            protected override Builder ThisBuilder {
              get { return this; }
            }
            public Builder() {
              result = DefaultInstance;
              resultIsReadOnly = true;
            }
            internal Builder(Request cloneFrom) {
              result = cloneFrom;
              resultIsReadOnly = true;
            }
            
            private bool resultIsReadOnly;
            private Request result;
            
            private Request PrepareBuilder() {
              if (resultIsReadOnly) {
                Request original = result;
                result = new Request();
                resultIsReadOnly = false;
                MergeFrom(original);
              }
              return result;
            }
            
            public override bool IsInitialized {
              get { return result.IsInitialized; }
            }
            
            protected override Request MessageBeingBuilt {
              get { return PrepareBuilder(); }
            }
            
            public override Builder Clear() {
              result = DefaultInstance;
              resultIsReadOnly = true;
              return this;
            }
            
            public override Builder Clone() {
              if (resultIsReadOnly) {
                return new Builder(result);
              } else {
                return new Builder().MergeFrom(result);
              }
            }
            
            public override pbd::MessageDescriptor DescriptorForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.Descriptor; }
            }
            
            public override Request DefaultInstanceForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.DefaultInstance; }
            }
            
            public override Request BuildPartial() {
              if (resultIsReadOnly) {
                return result;
              }
              resultIsReadOnly = true;
              return result.MakeReadOnly();
            }
            
            public override Builder MergeFrom(pb::IMessage other) {
              if (other is Request) {
                return MergeFrom((Request) other);
              } else {
                base.MergeFrom(other);
                return this;
              }
            }
            
            public override Builder MergeFrom(Request other) {
              if (other == global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.DefaultInstance) return this;
              PrepareBuilder();
              if (other.HasType) {
                Type = other.Type;
              }
              this.MergeUnknownFields(other.UnknownFields);
              return this;
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input) {
              return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              PrepareBuilder();
              pb::UnknownFieldSet.Builder unknownFields = null;
              uint tag;
              string field_name;
              while (input.ReadTag(out tag, out field_name)) {
                if(tag == 0 && field_name != null) {
                  int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
                  if(field_ordinal >= 0)
                    tag = _requestFieldTags[field_ordinal];
                  else {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    continue;
                  }
                }
                switch (tag) {
                  case 0: {
                    throw pb::InvalidProtocolBufferException.InvalidTag();
                  }
                  default: {
                    if (pb::WireFormat.IsEndGroupTag(tag)) {
                      if (unknownFields != null) {
                        this.UnknownFields = unknownFields.Build();
                      }
                      return this;
                    }
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    break;
                  }
                  case 8: {
                    object unknown;
                    if(input.ReadEnum(ref result.type_, out unknown)) {
                      result.hasType = true;
                    } else if(unknown is int) {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                    }
                    break;
                  }
                }
              }
              
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            
            
            public bool HasType {
             get { return result.hasType; }
            }
            public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.Types.Type Type {
              get { return result.Type; }
              set { SetType(value); }
            }
            public Builder SetType(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.Types.Type value) {
              PrepareBuilder();
              result.hasType = true;
              result.type_ = value;
              return this;
            }
            public Builder ClearType() {
              PrepareBuilder();
              result.hasType = false;
              result.type_ = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.Types.Type.UNKNOWN;
              return this;
            }
          }
          static Request() {
            object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
          }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Read : pb::GeneratedMessage<Read, Read.Builder> {
          private Read() { }
          private static readonly Read defaultInstance = new Read().MakeReadOnly();
          private static readonly string[] _readFieldNames = new string[] { "sender", "timestamp" };
          private static readonly uint[] _readFieldTags = new uint[] { 10, 16 };
          public static Read DefaultInstance {
            get { return defaultInstance; }
          }
          
          public override Read DefaultInstanceForType {
            get { return DefaultInstance; }
          }
          
          protected override Read ThisMessage {
            get { return this; }
          }
          
          public static pbd::MessageDescriptor Descriptor {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Read__Descriptor; }
          }
          
          protected override pb::FieldAccess.FieldAccessorTable<Read, Read.Builder> InternalFieldAccessors {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_SyncMessage_Read__FieldAccessorTable; }
          }
          
          public const int SenderFieldNumber = 1;
          private bool hasSender;
          private string sender_ = "";
          public bool HasSender {
            get { return hasSender; }
          }
          public string Sender {
            get { return sender_; }
          }
          
          public const int TimestampFieldNumber = 2;
          private bool hasTimestamp;
          private ulong timestamp_;
          public bool HasTimestamp {
            get { return hasTimestamp; }
          }
          [global::System.CLSCompliant(false)]
          public ulong Timestamp {
            get { return timestamp_; }
          }
          
          public override bool IsInitialized {
            get {
              return true;
            }
          }
          
          public override void WriteTo(pb::ICodedOutputStream output) {
            CalcSerializedSize();
            string[] field_names = _readFieldNames;
            if (hasSender) {
              output.WriteString(1, field_names[0], Sender);
            }
            if (hasTimestamp) {
              output.WriteUInt64(2, field_names[1], Timestamp);
            }
            UnknownFields.WriteTo(output);
          }
          
          private int memoizedSerializedSize = -1;
          public override int SerializedSize {
            get {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              return CalcSerializedSize();
            }
          }
          
          private int CalcSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasSender) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Sender);
            }
            if (hasTimestamp) {
              size += pb::CodedOutputStream.ComputeUInt64Size(2, Timestamp);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
          public static Read ParseFrom(pb::ByteString data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Read ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Read ParseFrom(byte[] data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Read ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Read ParseFrom(global::System.IO.Stream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Read ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          public static Read ParseDelimitedFrom(global::System.IO.Stream input) {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
          }
          public static Read ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
          }
          public static Read ParseFrom(pb::ICodedInputStream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Read ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          private Read MakeReadOnly() {
            return this;
          }
          
          public static Builder CreateBuilder() { return new Builder(); }
          public override Builder ToBuilder() { return CreateBuilder(this); }
          public override Builder CreateBuilderForType() { return new Builder(); }
          public static Builder CreateBuilder(Read prototype) {
            return new Builder(prototype);
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Builder : pb::GeneratedBuilder<Read, Builder> {
            protected override Builder ThisBuilder {
              get { return this; }
            }
            public Builder() {
              result = DefaultInstance;
              resultIsReadOnly = true;
            }
            internal Builder(Read cloneFrom) {
              result = cloneFrom;
              resultIsReadOnly = true;
            }
            
            private bool resultIsReadOnly;
            private Read result;
            
            private Read PrepareBuilder() {
              if (resultIsReadOnly) {
                Read original = result;
                result = new Read();
                resultIsReadOnly = false;
                MergeFrom(original);
              }
              return result;
            }
            
            public override bool IsInitialized {
              get { return result.IsInitialized; }
            }
            
            protected override Read MessageBeingBuilt {
              get { return PrepareBuilder(); }
            }
            
            public override Builder Clear() {
              result = DefaultInstance;
              resultIsReadOnly = true;
              return this;
            }
            
            public override Builder Clone() {
              if (resultIsReadOnly) {
                return new Builder(result);
              } else {
                return new Builder().MergeFrom(result);
              }
            }
            
            public override pbd::MessageDescriptor DescriptorForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read.Descriptor; }
            }
            
            public override Read DefaultInstanceForType {
              get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read.DefaultInstance; }
            }
            
            public override Read BuildPartial() {
              if (resultIsReadOnly) {
                return result;
              }
              resultIsReadOnly = true;
              return result.MakeReadOnly();
            }
            
            public override Builder MergeFrom(pb::IMessage other) {
              if (other is Read) {
                return MergeFrom((Read) other);
              } else {
                base.MergeFrom(other);
                return this;
              }
            }
            
            public override Builder MergeFrom(Read other) {
              if (other == global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read.DefaultInstance) return this;
              PrepareBuilder();
              if (other.HasSender) {
                Sender = other.Sender;
              }
              if (other.HasTimestamp) {
                Timestamp = other.Timestamp;
              }
              this.MergeUnknownFields(other.UnknownFields);
              return this;
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input) {
              return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              PrepareBuilder();
              pb::UnknownFieldSet.Builder unknownFields = null;
              uint tag;
              string field_name;
              while (input.ReadTag(out tag, out field_name)) {
                if(tag == 0 && field_name != null) {
                  int field_ordinal = global::System.Array.BinarySearch(_readFieldNames, field_name, global::System.StringComparer.Ordinal);
                  if(field_ordinal >= 0)
                    tag = _readFieldTags[field_ordinal];
                  else {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    continue;
                  }
                }
                switch (tag) {
                  case 0: {
                    throw pb::InvalidProtocolBufferException.InvalidTag();
                  }
                  default: {
                    if (pb::WireFormat.IsEndGroupTag(tag)) {
                      if (unknownFields != null) {
                        this.UnknownFields = unknownFields.Build();
                      }
                      return this;
                    }
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    break;
                  }
                  case 10: {
                    result.hasSender = input.ReadString(ref result.sender_);
                    break;
                  }
                  case 16: {
                    result.hasTimestamp = input.ReadUInt64(ref result.timestamp_);
                    break;
                  }
                }
              }
              
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            
            
            public bool HasSender {
              get { return result.hasSender; }
            }
            public string Sender {
              get { return result.Sender; }
              set { SetSender(value); }
            }
            public Builder SetSender(string value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              result.hasSender = true;
              result.sender_ = value;
              return this;
            }
            public Builder ClearSender() {
              PrepareBuilder();
              result.hasSender = false;
              result.sender_ = "";
              return this;
            }
            
            public bool HasTimestamp {
              get { return result.hasTimestamp; }
            }
            [global::System.CLSCompliant(false)]
            public ulong Timestamp {
              get { return result.Timestamp; }
              set { SetTimestamp(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetTimestamp(ulong value) {
              PrepareBuilder();
              result.hasTimestamp = true;
              result.timestamp_ = value;
              return this;
            }
            public Builder ClearTimestamp() {
              PrepareBuilder();
              result.hasTimestamp = false;
              result.timestamp_ = 0UL;
              return this;
            }
          }
          static Read() {
            object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
          }
        }
        
      }
      #endregion
      
      public const int SentFieldNumber = 1;
      private bool hasSent;
      private global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent sent_;
      public bool HasSent {
        get { return hasSent; }
      }
      public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent Sent {
        get { return sent_ ?? global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent.DefaultInstance; }
      }
      
      public const int ContactsFieldNumber = 2;
      private bool hasContacts;
      private global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts contacts_;
      public bool HasContacts {
        get { return hasContacts; }
      }
      public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts Contacts {
        get { return contacts_ ?? global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts.DefaultInstance; }
      }
      
      public const int GroupsFieldNumber = 3;
      private bool hasGroups;
      private global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups groups_;
      public bool HasGroups {
        get { return hasGroups; }
      }
      public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups Groups {
        get { return groups_ ?? global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups.DefaultInstance; }
      }
      
      public const int RequestFieldNumber = 4;
      private bool hasRequest;
      private global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request request_;
      public bool HasRequest {
        get { return hasRequest; }
      }
      public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request Request {
        get { return request_ ?? global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.DefaultInstance; }
      }
      
      public const int ReadFieldNumber = 5;
      private pbc::PopsicleList<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read> read_ = new pbc::PopsicleList<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read>();
      public scg::IList<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read> ReadList {
        get { return read_; }
      }
      public int ReadCount {
        get { return read_.Count; }
      }
      public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read GetRead(int index) {
        return read_[index];
      }
      
      public const int BlockedFieldNumber = 6;
      private bool hasBlocked;
      private global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked blocked_;
      public bool HasBlocked {
        get { return hasBlocked; }
      }
      public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked Blocked {
        get { return blocked_ ?? global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _syncMessageFieldNames;
        if (hasSent) {
          output.WriteMessage(1, field_names[5], Sent);
        }
        if (hasContacts) {
          output.WriteMessage(2, field_names[1], Contacts);
        }
        if (hasGroups) {
          output.WriteMessage(3, field_names[2], Groups);
        }
        if (hasRequest) {
          output.WriteMessage(4, field_names[4], Request);
        }
        if (read_.Count > 0) {
          output.WriteMessageArray(5, field_names[3], read_);
        }
        if (hasBlocked) {
          output.WriteMessage(6, field_names[0], Blocked);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSent) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Sent);
        }
        if (hasContacts) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Contacts);
        }
        if (hasGroups) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Groups);
        }
        if (hasRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Request);
        }
        foreach (global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read element in ReadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (hasBlocked) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Blocked);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static SyncMessage ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static SyncMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static SyncMessage ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static SyncMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static SyncMessage ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static SyncMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static SyncMessage ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static SyncMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static SyncMessage ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static SyncMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private SyncMessage MakeReadOnly() {
        read_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(SyncMessage prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<SyncMessage, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(SyncMessage cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private SyncMessage result;
        
        private SyncMessage PrepareBuilder() {
          if (resultIsReadOnly) {
            SyncMessage original = result;
            result = new SyncMessage();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override SyncMessage MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.Descriptor; }
        }
        
        public override SyncMessage DefaultInstanceForType {
          get { return global::libsignalservice.push.SignalServiceProtos.SyncMessage.DefaultInstance; }
        }
        
        public override SyncMessage BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is SyncMessage) {
            return MergeFrom((SyncMessage) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(SyncMessage other) {
          if (other == global::libsignalservice.push.SignalServiceProtos.SyncMessage.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasSent) {
            MergeSent(other.Sent);
          }
          if (other.HasContacts) {
            MergeContacts(other.Contacts);
          }
          if (other.HasGroups) {
            MergeGroups(other.Groups);
          }
          if (other.HasRequest) {
            MergeRequest(other.Request);
          }
          if (other.read_.Count != 0) {
            result.read_.Add(other.read_);
          }
          if (other.HasBlocked) {
            MergeBlocked(other.Blocked);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_syncMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _syncMessageFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent.CreateBuilder();
                if (result.hasSent) {
                  subBuilder.MergeFrom(Sent);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Sent = subBuilder.BuildPartial();
                break;
              }
              case 18: {
                global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts.CreateBuilder();
                if (result.hasContacts) {
                  subBuilder.MergeFrom(Contacts);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Contacts = subBuilder.BuildPartial();
                break;
              }
              case 26: {
                global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups.CreateBuilder();
                if (result.hasGroups) {
                  subBuilder.MergeFrom(Groups);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Groups = subBuilder.BuildPartial();
                break;
              }
              case 34: {
                global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.CreateBuilder();
                if (result.hasRequest) {
                  subBuilder.MergeFrom(Request);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Request = subBuilder.BuildPartial();
                break;
              }
              case 42: {
                input.ReadMessageArray(tag, field_name, result.read_, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read.DefaultInstance, extensionRegistry);
                break;
              }
              case 50: {
                global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked.CreateBuilder();
                if (result.hasBlocked) {
                  subBuilder.MergeFrom(Blocked);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Blocked = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasSent {
         get { return result.hasSent; }
        }
        public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent Sent {
          get { return result.Sent; }
          set { SetSent(value); }
        }
        public Builder SetSent(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasSent = true;
          result.sent_ = value;
          return this;
        }
        public Builder SetSent(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasSent = true;
          result.sent_ = builderForValue.Build();
          return this;
        }
        public Builder MergeSent(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasSent &&
              result.sent_ != global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent.DefaultInstance) {
              result.sent_ = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Sent.CreateBuilder(result.sent_).MergeFrom(value).BuildPartial();
          } else {
            result.sent_ = value;
          }
          result.hasSent = true;
          return this;
        }
        public Builder ClearSent() {
          PrepareBuilder();
          result.hasSent = false;
          result.sent_ = null;
          return this;
        }
        
        public bool HasContacts {
         get { return result.hasContacts; }
        }
        public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts Contacts {
          get { return result.Contacts; }
          set { SetContacts(value); }
        }
        public Builder SetContacts(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasContacts = true;
          result.contacts_ = value;
          return this;
        }
        public Builder SetContacts(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasContacts = true;
          result.contacts_ = builderForValue.Build();
          return this;
        }
        public Builder MergeContacts(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasContacts &&
              result.contacts_ != global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts.DefaultInstance) {
              result.contacts_ = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Contacts.CreateBuilder(result.contacts_).MergeFrom(value).BuildPartial();
          } else {
            result.contacts_ = value;
          }
          result.hasContacts = true;
          return this;
        }
        public Builder ClearContacts() {
          PrepareBuilder();
          result.hasContacts = false;
          result.contacts_ = null;
          return this;
        }
        
        public bool HasGroups {
         get { return result.hasGroups; }
        }
        public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups Groups {
          get { return result.Groups; }
          set { SetGroups(value); }
        }
        public Builder SetGroups(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasGroups = true;
          result.groups_ = value;
          return this;
        }
        public Builder SetGroups(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasGroups = true;
          result.groups_ = builderForValue.Build();
          return this;
        }
        public Builder MergeGroups(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasGroups &&
              result.groups_ != global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups.DefaultInstance) {
              result.groups_ = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Groups.CreateBuilder(result.groups_).MergeFrom(value).BuildPartial();
          } else {
            result.groups_ = value;
          }
          result.hasGroups = true;
          return this;
        }
        public Builder ClearGroups() {
          PrepareBuilder();
          result.hasGroups = false;
          result.groups_ = null;
          return this;
        }
        
        public bool HasRequest {
         get { return result.hasRequest; }
        }
        public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request Request {
          get { return result.Request; }
          set { SetRequest(value); }
        }
        public Builder SetRequest(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasRequest = true;
          result.request_ = value;
          return this;
        }
        public Builder SetRequest(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasRequest = true;
          result.request_ = builderForValue.Build();
          return this;
        }
        public Builder MergeRequest(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasRequest &&
              result.request_ != global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.DefaultInstance) {
              result.request_ = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Request.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
          } else {
            result.request_ = value;
          }
          result.hasRequest = true;
          return this;
        }
        public Builder ClearRequest() {
          PrepareBuilder();
          result.hasRequest = false;
          result.request_ = null;
          return this;
        }
        
        public pbc::IPopsicleList<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read> ReadList {
          get { return PrepareBuilder().read_; }
        }
        public int ReadCount {
          get { return result.ReadCount; }
        }
        public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read GetRead(int index) {
          return result.GetRead(index);
        }
        public Builder SetRead(int index, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.read_[index] = value;
          return this;
        }
        public Builder SetRead(int index, global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.read_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddRead(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.read_.Add(value);
          return this;
        }
        public Builder AddRead(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.read_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeRead(scg::IEnumerable<global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Read> values) {
          PrepareBuilder();
          result.read_.Add(values);
          return this;
        }
        public Builder ClearRead() {
          PrepareBuilder();
          result.read_.Clear();
          return this;
        }
        
        public bool HasBlocked {
         get { return result.hasBlocked; }
        }
        public global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked Blocked {
          get { return result.Blocked; }
          set { SetBlocked(value); }
        }
        public Builder SetBlocked(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasBlocked = true;
          result.blocked_ = value;
          return this;
        }
        public Builder SetBlocked(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasBlocked = true;
          result.blocked_ = builderForValue.Build();
          return this;
        }
        public Builder MergeBlocked(global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasBlocked &&
              result.blocked_ != global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked.DefaultInstance) {
              result.blocked_ = global::libsignalservice.push.SignalServiceProtos.SyncMessage.Types.Blocked.CreateBuilder(result.blocked_).MergeFrom(value).BuildPartial();
          } else {
            result.blocked_ = value;
          }
          result.hasBlocked = true;
          return this;
        }
        public Builder ClearBlocked() {
          PrepareBuilder();
          result.hasBlocked = false;
          result.blocked_ = null;
          return this;
        }
      }
      static SyncMessage() {
        object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class AttachmentPointer : pb::GeneratedMessage<AttachmentPointer, AttachmentPointer.Builder> {
      private AttachmentPointer() { }
      private static readonly AttachmentPointer defaultInstance = new AttachmentPointer().MakeReadOnly();
      private static readonly string[] _attachmentPointerFieldNames = new string[] { "contentType", "id", "key", "size", "thumbnail" };
      private static readonly uint[] _attachmentPointerFieldTags = new uint[] { 18, 9, 26, 32, 42 };
      public static AttachmentPointer DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override AttachmentPointer DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override AttachmentPointer ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_AttachmentPointer__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<AttachmentPointer, AttachmentPointer.Builder> InternalFieldAccessors {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_AttachmentPointer__FieldAccessorTable; }
      }
      
      public const int IdFieldNumber = 1;
      private bool hasId;
      private ulong id_;
      public bool HasId {
        get { return hasId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Id {
        get { return id_; }
      }
      
      public const int ContentTypeFieldNumber = 2;
      private bool hasContentType;
      private string contentType_ = "";
      public bool HasContentType {
        get { return hasContentType; }
      }
      public string ContentType {
        get { return contentType_; }
      }
      
      public const int KeyFieldNumber = 3;
      private bool hasKey;
      private pb::ByteString key_ = pb::ByteString.Empty;
      public bool HasKey {
        get { return hasKey; }
      }
      public pb::ByteString Key {
        get { return key_; }
      }
      
      public const int SizeFieldNumber = 4;
      private bool hasSize;
      private uint size_;
      public bool HasSize {
        get { return hasSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint Size {
        get { return size_; }
      }
      
      public const int ThumbnailFieldNumber = 5;
      private bool hasThumbnail;
      private pb::ByteString thumbnail_ = pb::ByteString.Empty;
      public bool HasThumbnail {
        get { return hasThumbnail; }
      }
      public pb::ByteString Thumbnail {
        get { return thumbnail_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _attachmentPointerFieldNames;
        if (hasId) {
          output.WriteFixed64(1, field_names[1], Id);
        }
        if (hasContentType) {
          output.WriteString(2, field_names[0], ContentType);
        }
        if (hasKey) {
          output.WriteBytes(3, field_names[2], Key);
        }
        if (hasSize) {
          output.WriteUInt32(4, field_names[3], Size);
        }
        if (hasThumbnail) {
          output.WriteBytes(5, field_names[4], Thumbnail);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, Id);
        }
        if (hasContentType) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ContentType);
        }
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Key);
        }
        if (hasSize) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Size);
        }
        if (hasThumbnail) {
          size += pb::CodedOutputStream.ComputeBytesSize(5, Thumbnail);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static AttachmentPointer ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static AttachmentPointer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static AttachmentPointer ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static AttachmentPointer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static AttachmentPointer ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static AttachmentPointer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static AttachmentPointer ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static AttachmentPointer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static AttachmentPointer ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static AttachmentPointer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private AttachmentPointer MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(AttachmentPointer prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<AttachmentPointer, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(AttachmentPointer cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private AttachmentPointer result;
        
        private AttachmentPointer PrepareBuilder() {
          if (resultIsReadOnly) {
            AttachmentPointer original = result;
            result = new AttachmentPointer();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override AttachmentPointer MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.Descriptor; }
        }
        
        public override AttachmentPointer DefaultInstanceForType {
          get { return global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.DefaultInstance; }
        }
        
        public override AttachmentPointer BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is AttachmentPointer) {
            return MergeFrom((AttachmentPointer) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(AttachmentPointer other) {
          if (other == global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasContentType) {
            ContentType = other.ContentType;
          }
          if (other.HasKey) {
            Key = other.Key;
          }
          if (other.HasSize) {
            Size = other.Size;
          }
          if (other.HasThumbnail) {
            Thumbnail = other.Thumbnail;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_attachmentPointerFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _attachmentPointerFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 9: {
                result.hasId = input.ReadFixed64(ref result.id_);
                break;
              }
              case 18: {
                result.hasContentType = input.ReadString(ref result.contentType_);
                break;
              }
              case 26: {
                result.hasKey = input.ReadBytes(ref result.key_);
                break;
              }
              case 32: {
                result.hasSize = input.ReadUInt32(ref result.size_);
                break;
              }
              case 42: {
                result.hasThumbnail = input.ReadBytes(ref result.thumbnail_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasId {
          get { return result.hasId; }
        }
        [global::System.CLSCompliant(false)]
        public ulong Id {
          get { return result.Id; }
          set { SetId(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetId(ulong value) {
          PrepareBuilder();
          result.hasId = true;
          result.id_ = value;
          return this;
        }
        public Builder ClearId() {
          PrepareBuilder();
          result.hasId = false;
          result.id_ = 0;
          return this;
        }
        
        public bool HasContentType {
          get { return result.hasContentType; }
        }
        public string ContentType {
          get { return result.ContentType; }
          set { SetContentType(value); }
        }
        public Builder SetContentType(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasContentType = true;
          result.contentType_ = value;
          return this;
        }
        public Builder ClearContentType() {
          PrepareBuilder();
          result.hasContentType = false;
          result.contentType_ = "";
          return this;
        }
        
        public bool HasKey {
          get { return result.hasKey; }
        }
        public pb::ByteString Key {
          get { return result.Key; }
          set { SetKey(value); }
        }
        public Builder SetKey(pb::ByteString value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasKey = true;
          result.key_ = value;
          return this;
        }
        public Builder ClearKey() {
          PrepareBuilder();
          result.hasKey = false;
          result.key_ = pb::ByteString.Empty;
          return this;
        }
        
        public bool HasSize {
          get { return result.hasSize; }
        }
        [global::System.CLSCompliant(false)]
        public uint Size {
          get { return result.Size; }
          set { SetSize(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetSize(uint value) {
          PrepareBuilder();
          result.hasSize = true;
          result.size_ = value;
          return this;
        }
        public Builder ClearSize() {
          PrepareBuilder();
          result.hasSize = false;
          result.size_ = 0;
          return this;
        }
        
        public bool HasThumbnail {
          get { return result.hasThumbnail; }
        }
        public pb::ByteString Thumbnail {
          get { return result.Thumbnail; }
          set { SetThumbnail(value); }
        }
        public Builder SetThumbnail(pb::ByteString value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasThumbnail = true;
          result.thumbnail_ = value;
          return this;
        }
        public Builder ClearThumbnail() {
          PrepareBuilder();
          result.hasThumbnail = false;
          result.thumbnail_ = pb::ByteString.Empty;
          return this;
        }
      }
      static AttachmentPointer() {
        object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class GroupContext : pb::GeneratedMessage<GroupContext, GroupContext.Builder> {
      private GroupContext() { }
      private static readonly GroupContext defaultInstance = new GroupContext().MakeReadOnly();
      private static readonly string[] _groupContextFieldNames = new string[] { "avatar", "id", "members", "name", "type" };
      private static readonly uint[] _groupContextFieldTags = new uint[] { 42, 10, 34, 26, 16 };
      public static GroupContext DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override GroupContext DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override GroupContext ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_GroupContext__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<GroupContext, GroupContext.Builder> InternalFieldAccessors {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_GroupContext__FieldAccessorTable; }
      }
      
      #region Nested types
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        public enum Type {
          UNKNOWN = 0,
          UPDATE = 1,
          DELIVER = 2,
          QUIT = 3,
        }
        
      }
      #endregion
      
      public const int IdFieldNumber = 1;
      private bool hasId;
      private pb::ByteString id_ = pb::ByteString.Empty;
      public bool HasId {
        get { return hasId; }
      }
      public pb::ByteString Id {
        get { return id_; }
      }
      
      public const int TypeFieldNumber = 2;
      private bool hasType;
      private global::libsignalservice.push.SignalServiceProtos.GroupContext.Types.Type type_ = global::libsignalservice.push.SignalServiceProtos.GroupContext.Types.Type.UNKNOWN;
      public bool HasType {
        get { return hasType; }
      }
      public global::libsignalservice.push.SignalServiceProtos.GroupContext.Types.Type Type {
        get { return type_; }
      }
      
      public const int NameFieldNumber = 3;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int MembersFieldNumber = 4;
      private pbc::PopsicleList<string> members_ = new pbc::PopsicleList<string>();
      public scg::IList<string> MembersList {
        get { return pbc::Lists.AsReadOnly(members_); }
      }
      public int MembersCount {
        get { return members_.Count; }
      }
      public string GetMembers(int index) {
        return members_[index];
      }
      
      public const int AvatarFieldNumber = 5;
      private bool hasAvatar;
      private global::libsignalservice.push.SignalServiceProtos.AttachmentPointer avatar_;
      public bool HasAvatar {
        get { return hasAvatar; }
      }
      public global::libsignalservice.push.SignalServiceProtos.AttachmentPointer Avatar {
        get { return avatar_ ?? global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _groupContextFieldNames;
        if (hasId) {
          output.WriteBytes(1, field_names[1], Id);
        }
        if (hasType) {
          output.WriteEnum(2, field_names[4], (int) Type, Type);
        }
        if (hasName) {
          output.WriteString(3, field_names[3], Name);
        }
        if (members_.Count > 0) {
          output.WriteStringArray(4, field_names[2], members_);
        }
        if (hasAvatar) {
          output.WriteMessage(5, field_names[0], Avatar);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Id);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        {
          int dataSize = 0;
          foreach (string element in MembersList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * members_.Count;
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Avatar);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static GroupContext ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static GroupContext ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static GroupContext ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static GroupContext ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static GroupContext ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static GroupContext ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static GroupContext ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static GroupContext ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static GroupContext ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static GroupContext ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private GroupContext MakeReadOnly() {
        members_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(GroupContext prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<GroupContext, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(GroupContext cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private GroupContext result;
        
        private GroupContext PrepareBuilder() {
          if (resultIsReadOnly) {
            GroupContext original = result;
            result = new GroupContext();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override GroupContext MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::libsignalservice.push.SignalServiceProtos.GroupContext.Descriptor; }
        }
        
        public override GroupContext DefaultInstanceForType {
          get { return global::libsignalservice.push.SignalServiceProtos.GroupContext.DefaultInstance; }
        }
        
        public override GroupContext BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is GroupContext) {
            return MergeFrom((GroupContext) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(GroupContext other) {
          if (other == global::libsignalservice.push.SignalServiceProtos.GroupContext.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.members_.Count != 0) {
            result.members_.Add(other.members_);
          }
          if (other.HasAvatar) {
            MergeAvatar(other.Avatar);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_groupContextFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _groupContextFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasId = input.ReadBytes(ref result.id_);
                break;
              }
              case 16: {
                object unknown;
                if(input.ReadEnum(ref result.type_, out unknown)) {
                  result.hasType = true;
                } else if(unknown is int) {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  unknownFields.MergeVarintField(2, (ulong)(int)unknown);
                }
                break;
              }
              case 26: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 34: {
                input.ReadStringArray(tag, field_name, result.members_);
                break;
              }
              case 42: {
                global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.CreateBuilder();
                if (result.hasAvatar) {
                  subBuilder.MergeFrom(Avatar);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Avatar = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasId {
          get { return result.hasId; }
        }
        public pb::ByteString Id {
          get { return result.Id; }
          set { SetId(value); }
        }
        public Builder SetId(pb::ByteString value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasId = true;
          result.id_ = value;
          return this;
        }
        public Builder ClearId() {
          PrepareBuilder();
          result.hasId = false;
          result.id_ = pb::ByteString.Empty;
          return this;
        }
        
        public bool HasType {
         get { return result.hasType; }
        }
        public global::libsignalservice.push.SignalServiceProtos.GroupContext.Types.Type Type {
          get { return result.Type; }
          set { SetType(value); }
        }
        public Builder SetType(global::libsignalservice.push.SignalServiceProtos.GroupContext.Types.Type value) {
          PrepareBuilder();
          result.hasType = true;
          result.type_ = value;
          return this;
        }
        public Builder ClearType() {
          PrepareBuilder();
          result.hasType = false;
          result.type_ = global::libsignalservice.push.SignalServiceProtos.GroupContext.Types.Type.UNKNOWN;
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public pbc::IPopsicleList<string> MembersList {
          get { return PrepareBuilder().members_; }
        }
        public int MembersCount {
          get { return result.MembersCount; }
        }
        public string GetMembers(int index) {
          return result.GetMembers(index);
        }
        public Builder SetMembers(int index, string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.members_[index] = value;
          return this;
        }
        public Builder AddMembers(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.members_.Add(value);
          return this;
        }
        public Builder AddRangeMembers(scg::IEnumerable<string> values) {
          PrepareBuilder();
          result.members_.Add(values);
          return this;
        }
        public Builder ClearMembers() {
          PrepareBuilder();
          result.members_.Clear();
          return this;
        }
        
        public bool HasAvatar {
         get { return result.hasAvatar; }
        }
        public global::libsignalservice.push.SignalServiceProtos.AttachmentPointer Avatar {
          get { return result.Avatar; }
          set { SetAvatar(value); }
        }
        public Builder SetAvatar(global::libsignalservice.push.SignalServiceProtos.AttachmentPointer value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasAvatar = true;
          result.avatar_ = value;
          return this;
        }
        public Builder SetAvatar(global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasAvatar = true;
          result.avatar_ = builderForValue.Build();
          return this;
        }
        public Builder MergeAvatar(global::libsignalservice.push.SignalServiceProtos.AttachmentPointer value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasAvatar &&
              result.avatar_ != global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.DefaultInstance) {
              result.avatar_ = global::libsignalservice.push.SignalServiceProtos.AttachmentPointer.CreateBuilder(result.avatar_).MergeFrom(value).BuildPartial();
          } else {
            result.avatar_ = value;
          }
          result.hasAvatar = true;
          return this;
        }
        public Builder ClearAvatar() {
          PrepareBuilder();
          result.hasAvatar = false;
          result.avatar_ = null;
          return this;
        }
      }
      static GroupContext() {
        object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ContactDetails : pb::GeneratedMessage<ContactDetails, ContactDetails.Builder> {
      private ContactDetails() { }
      private static readonly ContactDetails defaultInstance = new ContactDetails().MakeReadOnly();
      private static readonly string[] _contactDetailsFieldNames = new string[] { "avatar", "color", "name", "number" };
      private static readonly uint[] _contactDetailsFieldTags = new uint[] { 26, 34, 18, 10 };
      public static ContactDetails DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override ContactDetails DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override ContactDetails ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_ContactDetails__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<ContactDetails, ContactDetails.Builder> InternalFieldAccessors {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_ContactDetails__FieldAccessorTable; }
      }
      
      #region Nested types
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Avatar : pb::GeneratedMessage<Avatar, Avatar.Builder> {
          private Avatar() { }
          private static readonly Avatar defaultInstance = new Avatar().MakeReadOnly();
          private static readonly string[] _avatarFieldNames = new string[] { "contentType", "length" };
          private static readonly uint[] _avatarFieldTags = new uint[] { 10, 16 };
          public static Avatar DefaultInstance {
            get { return defaultInstance; }
          }
          
          public override Avatar DefaultInstanceForType {
            get { return DefaultInstance; }
          }
          
          protected override Avatar ThisMessage {
            get { return this; }
          }
          
          public static pbd::MessageDescriptor Descriptor {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_ContactDetails_Avatar__Descriptor; }
          }
          
          protected override pb::FieldAccess.FieldAccessorTable<Avatar, Avatar.Builder> InternalFieldAccessors {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_ContactDetails_Avatar__FieldAccessorTable; }
          }
          
          public const int ContentTypeFieldNumber = 1;
          private bool hasContentType;
          private string contentType_ = "";
          public bool HasContentType {
            get { return hasContentType; }
          }
          public string ContentType {
            get { return contentType_; }
          }
          
          public const int LengthFieldNumber = 2;
          private bool hasLength;
          private uint length_;
          public bool HasLength {
            get { return hasLength; }
          }
          [global::System.CLSCompliant(false)]
          public uint Length {
            get { return length_; }
          }
          
          public override bool IsInitialized {
            get {
              return true;
            }
          }
          
          public override void WriteTo(pb::ICodedOutputStream output) {
            CalcSerializedSize();
            string[] field_names = _avatarFieldNames;
            if (hasContentType) {
              output.WriteString(1, field_names[0], ContentType);
            }
            if (hasLength) {
              output.WriteUInt32(2, field_names[1], Length);
            }
            UnknownFields.WriteTo(output);
          }
          
          private int memoizedSerializedSize = -1;
          public override int SerializedSize {
            get {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              return CalcSerializedSize();
            }
          }
          
          private int CalcSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasContentType) {
              size += pb::CodedOutputStream.ComputeStringSize(1, ContentType);
            }
            if (hasLength) {
              size += pb::CodedOutputStream.ComputeUInt32Size(2, Length);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
          public static Avatar ParseFrom(pb::ByteString data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Avatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Avatar ParseFrom(byte[] data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Avatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Avatar ParseFrom(global::System.IO.Stream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Avatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          public static Avatar ParseDelimitedFrom(global::System.IO.Stream input) {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
          }
          public static Avatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
          }
          public static Avatar ParseFrom(pb::ICodedInputStream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Avatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          private Avatar MakeReadOnly() {
            return this;
          }
          
          public static Builder CreateBuilder() { return new Builder(); }
          public override Builder ToBuilder() { return CreateBuilder(this); }
          public override Builder CreateBuilderForType() { return new Builder(); }
          public static Builder CreateBuilder(Avatar prototype) {
            return new Builder(prototype);
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Builder : pb::GeneratedBuilder<Avatar, Builder> {
            protected override Builder ThisBuilder {
              get { return this; }
            }
            public Builder() {
              result = DefaultInstance;
              resultIsReadOnly = true;
            }
            internal Builder(Avatar cloneFrom) {
              result = cloneFrom;
              resultIsReadOnly = true;
            }
            
            private bool resultIsReadOnly;
            private Avatar result;
            
            private Avatar PrepareBuilder() {
              if (resultIsReadOnly) {
                Avatar original = result;
                result = new Avatar();
                resultIsReadOnly = false;
                MergeFrom(original);
              }
              return result;
            }
            
            public override bool IsInitialized {
              get { return result.IsInitialized; }
            }
            
            protected override Avatar MessageBeingBuilt {
              get { return PrepareBuilder(); }
            }
            
            public override Builder Clear() {
              result = DefaultInstance;
              resultIsReadOnly = true;
              return this;
            }
            
            public override Builder Clone() {
              if (resultIsReadOnly) {
                return new Builder(result);
              } else {
                return new Builder().MergeFrom(result);
              }
            }
            
            public override pbd::MessageDescriptor DescriptorForType {
              get { return global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar.Descriptor; }
            }
            
            public override Avatar DefaultInstanceForType {
              get { return global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar.DefaultInstance; }
            }
            
            public override Avatar BuildPartial() {
              if (resultIsReadOnly) {
                return result;
              }
              resultIsReadOnly = true;
              return result.MakeReadOnly();
            }
            
            public override Builder MergeFrom(pb::IMessage other) {
              if (other is Avatar) {
                return MergeFrom((Avatar) other);
              } else {
                base.MergeFrom(other);
                return this;
              }
            }
            
            public override Builder MergeFrom(Avatar other) {
              if (other == global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar.DefaultInstance) return this;
              PrepareBuilder();
              if (other.HasContentType) {
                ContentType = other.ContentType;
              }
              if (other.HasLength) {
                Length = other.Length;
              }
              this.MergeUnknownFields(other.UnknownFields);
              return this;
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input) {
              return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              PrepareBuilder();
              pb::UnknownFieldSet.Builder unknownFields = null;
              uint tag;
              string field_name;
              while (input.ReadTag(out tag, out field_name)) {
                if(tag == 0 && field_name != null) {
                  int field_ordinal = global::System.Array.BinarySearch(_avatarFieldNames, field_name, global::System.StringComparer.Ordinal);
                  if(field_ordinal >= 0)
                    tag = _avatarFieldTags[field_ordinal];
                  else {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    continue;
                  }
                }
                switch (tag) {
                  case 0: {
                    throw pb::InvalidProtocolBufferException.InvalidTag();
                  }
                  default: {
                    if (pb::WireFormat.IsEndGroupTag(tag)) {
                      if (unknownFields != null) {
                        this.UnknownFields = unknownFields.Build();
                      }
                      return this;
                    }
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    break;
                  }
                  case 10: {
                    result.hasContentType = input.ReadString(ref result.contentType_);
                    break;
                  }
                  case 16: {
                    result.hasLength = input.ReadUInt32(ref result.length_);
                    break;
                  }
                }
              }
              
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            
            
            public bool HasContentType {
              get { return result.hasContentType; }
            }
            public string ContentType {
              get { return result.ContentType; }
              set { SetContentType(value); }
            }
            public Builder SetContentType(string value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              result.hasContentType = true;
              result.contentType_ = value;
              return this;
            }
            public Builder ClearContentType() {
              PrepareBuilder();
              result.hasContentType = false;
              result.contentType_ = "";
              return this;
            }
            
            public bool HasLength {
              get { return result.hasLength; }
            }
            [global::System.CLSCompliant(false)]
            public uint Length {
              get { return result.Length; }
              set { SetLength(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetLength(uint value) {
              PrepareBuilder();
              result.hasLength = true;
              result.length_ = value;
              return this;
            }
            public Builder ClearLength() {
              PrepareBuilder();
              result.hasLength = false;
              result.length_ = 0;
              return this;
            }
          }
          static Avatar() {
            object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
          }
        }
        
      }
      #endregion
      
      public const int NumberFieldNumber = 1;
      private bool hasNumber;
      private string number_ = "";
      public bool HasNumber {
        get { return hasNumber; }
      }
      public string Number {
        get { return number_; }
      }
      
      public const int NameFieldNumber = 2;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int AvatarFieldNumber = 3;
      private bool hasAvatar;
      private global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar avatar_;
      public bool HasAvatar {
        get { return hasAvatar; }
      }
      public global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar Avatar {
        get { return avatar_ ?? global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar.DefaultInstance; }
      }
      
      public const int ColorFieldNumber = 4;
      private bool hasColor;
      private string color_ = "";
      public bool HasColor {
        get { return hasColor; }
      }
      public string Color {
        get { return color_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _contactDetailsFieldNames;
        if (hasNumber) {
          output.WriteString(1, field_names[3], Number);
        }
        if (hasName) {
          output.WriteString(2, field_names[2], Name);
        }
        if (hasAvatar) {
          output.WriteMessage(3, field_names[0], Avatar);
        }
        if (hasColor) {
          output.WriteString(4, field_names[1], Color);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Number);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Avatar);
        }
        if (hasColor) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Color);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static ContactDetails ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static ContactDetails ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static ContactDetails ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static ContactDetails ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static ContactDetails ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static ContactDetails ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static ContactDetails ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static ContactDetails ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static ContactDetails ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static ContactDetails ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private ContactDetails MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(ContactDetails prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<ContactDetails, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(ContactDetails cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private ContactDetails result;
        
        private ContactDetails PrepareBuilder() {
          if (resultIsReadOnly) {
            ContactDetails original = result;
            result = new ContactDetails();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override ContactDetails MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::libsignalservice.push.SignalServiceProtos.ContactDetails.Descriptor; }
        }
        
        public override ContactDetails DefaultInstanceForType {
          get { return global::libsignalservice.push.SignalServiceProtos.ContactDetails.DefaultInstance; }
        }
        
        public override ContactDetails BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is ContactDetails) {
            return MergeFrom((ContactDetails) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(ContactDetails other) {
          if (other == global::libsignalservice.push.SignalServiceProtos.ContactDetails.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasNumber) {
            Number = other.Number;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasAvatar) {
            MergeAvatar(other.Avatar);
          }
          if (other.HasColor) {
            Color = other.Color;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_contactDetailsFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _contactDetailsFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasNumber = input.ReadString(ref result.number_);
                break;
              }
              case 18: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 26: {
                global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar.CreateBuilder();
                if (result.hasAvatar) {
                  subBuilder.MergeFrom(Avatar);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Avatar = subBuilder.BuildPartial();
                break;
              }
              case 34: {
                result.hasColor = input.ReadString(ref result.color_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasNumber {
          get { return result.hasNumber; }
        }
        public string Number {
          get { return result.Number; }
          set { SetNumber(value); }
        }
        public Builder SetNumber(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasNumber = true;
          result.number_ = value;
          return this;
        }
        public Builder ClearNumber() {
          PrepareBuilder();
          result.hasNumber = false;
          result.number_ = "";
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public bool HasAvatar {
         get { return result.hasAvatar; }
        }
        public global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar Avatar {
          get { return result.Avatar; }
          set { SetAvatar(value); }
        }
        public Builder SetAvatar(global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasAvatar = true;
          result.avatar_ = value;
          return this;
        }
        public Builder SetAvatar(global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasAvatar = true;
          result.avatar_ = builderForValue.Build();
          return this;
        }
        public Builder MergeAvatar(global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasAvatar &&
              result.avatar_ != global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar.DefaultInstance) {
              result.avatar_ = global::libsignalservice.push.SignalServiceProtos.ContactDetails.Types.Avatar.CreateBuilder(result.avatar_).MergeFrom(value).BuildPartial();
          } else {
            result.avatar_ = value;
          }
          result.hasAvatar = true;
          return this;
        }
        public Builder ClearAvatar() {
          PrepareBuilder();
          result.hasAvatar = false;
          result.avatar_ = null;
          return this;
        }
        
        public bool HasColor {
          get { return result.hasColor; }
        }
        public string Color {
          get { return result.Color; }
          set { SetColor(value); }
        }
        public Builder SetColor(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasColor = true;
          result.color_ = value;
          return this;
        }
        public Builder ClearColor() {
          PrepareBuilder();
          result.hasColor = false;
          result.color_ = "";
          return this;
        }
      }
      static ContactDetails() {
        object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class GroupDetails : pb::GeneratedMessage<GroupDetails, GroupDetails.Builder> {
      private GroupDetails() { }
      private static readonly GroupDetails defaultInstance = new GroupDetails().MakeReadOnly();
      private static readonly string[] _groupDetailsFieldNames = new string[] { "active", "avatar", "id", "members", "name" };
      private static readonly uint[] _groupDetailsFieldTags = new uint[] { 40, 34, 10, 26, 18 };
      public static GroupDetails DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override GroupDetails DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override GroupDetails ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_GroupDetails__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<GroupDetails, GroupDetails.Builder> InternalFieldAccessors {
        get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_GroupDetails__FieldAccessorTable; }
      }
      
      #region Nested types
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Avatar : pb::GeneratedMessage<Avatar, Avatar.Builder> {
          private Avatar() { }
          private static readonly Avatar defaultInstance = new Avatar().MakeReadOnly();
          private static readonly string[] _avatarFieldNames = new string[] { "contentType", "length" };
          private static readonly uint[] _avatarFieldTags = new uint[] { 10, 16 };
          public static Avatar DefaultInstance {
            get { return defaultInstance; }
          }
          
          public override Avatar DefaultInstanceForType {
            get { return DefaultInstance; }
          }
          
          protected override Avatar ThisMessage {
            get { return this; }
          }
          
          public static pbd::MessageDescriptor Descriptor {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_GroupDetails_Avatar__Descriptor; }
          }
          
          protected override pb::FieldAccess.FieldAccessorTable<Avatar, Avatar.Builder> InternalFieldAccessors {
            get { return global::libsignalservice.push.SignalServiceProtos.internal__static_textsecure_GroupDetails_Avatar__FieldAccessorTable; }
          }
          
          public const int ContentTypeFieldNumber = 1;
          private bool hasContentType;
          private string contentType_ = "";
          public bool HasContentType {
            get { return hasContentType; }
          }
          public string ContentType {
            get { return contentType_; }
          }
          
          public const int LengthFieldNumber = 2;
          private bool hasLength;
          private uint length_;
          public bool HasLength {
            get { return hasLength; }
          }
          [global::System.CLSCompliant(false)]
          public uint Length {
            get { return length_; }
          }
          
          public override bool IsInitialized {
            get {
              return true;
            }
          }
          
          public override void WriteTo(pb::ICodedOutputStream output) {
            CalcSerializedSize();
            string[] field_names = _avatarFieldNames;
            if (hasContentType) {
              output.WriteString(1, field_names[0], ContentType);
            }
            if (hasLength) {
              output.WriteUInt32(2, field_names[1], Length);
            }
            UnknownFields.WriteTo(output);
          }
          
          private int memoizedSerializedSize = -1;
          public override int SerializedSize {
            get {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              return CalcSerializedSize();
            }
          }
          
          private int CalcSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasContentType) {
              size += pb::CodedOutputStream.ComputeStringSize(1, ContentType);
            }
            if (hasLength) {
              size += pb::CodedOutputStream.ComputeUInt32Size(2, Length);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
          public static Avatar ParseFrom(pb::ByteString data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Avatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Avatar ParseFrom(byte[] data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static Avatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static Avatar ParseFrom(global::System.IO.Stream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Avatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          public static Avatar ParseDelimitedFrom(global::System.IO.Stream input) {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
          }
          public static Avatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
          }
          public static Avatar ParseFrom(pb::ICodedInputStream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static Avatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          private Avatar MakeReadOnly() {
            return this;
          }
          
          public static Builder CreateBuilder() { return new Builder(); }
          public override Builder ToBuilder() { return CreateBuilder(this); }
          public override Builder CreateBuilderForType() { return new Builder(); }
          public static Builder CreateBuilder(Avatar prototype) {
            return new Builder(prototype);
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Builder : pb::GeneratedBuilder<Avatar, Builder> {
            protected override Builder ThisBuilder {
              get { return this; }
            }
            public Builder() {
              result = DefaultInstance;
              resultIsReadOnly = true;
            }
            internal Builder(Avatar cloneFrom) {
              result = cloneFrom;
              resultIsReadOnly = true;
            }
            
            private bool resultIsReadOnly;
            private Avatar result;
            
            private Avatar PrepareBuilder() {
              if (resultIsReadOnly) {
                Avatar original = result;
                result = new Avatar();
                resultIsReadOnly = false;
                MergeFrom(original);
              }
              return result;
            }
            
            public override bool IsInitialized {
              get { return result.IsInitialized; }
            }
            
            protected override Avatar MessageBeingBuilt {
              get { return PrepareBuilder(); }
            }
            
            public override Builder Clear() {
              result = DefaultInstance;
              resultIsReadOnly = true;
              return this;
            }
            
            public override Builder Clone() {
              if (resultIsReadOnly) {
                return new Builder(result);
              } else {
                return new Builder().MergeFrom(result);
              }
            }
            
            public override pbd::MessageDescriptor DescriptorForType {
              get { return global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar.Descriptor; }
            }
            
            public override Avatar DefaultInstanceForType {
              get { return global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar.DefaultInstance; }
            }
            
            public override Avatar BuildPartial() {
              if (resultIsReadOnly) {
                return result;
              }
              resultIsReadOnly = true;
              return result.MakeReadOnly();
            }
            
            public override Builder MergeFrom(pb::IMessage other) {
              if (other is Avatar) {
                return MergeFrom((Avatar) other);
              } else {
                base.MergeFrom(other);
                return this;
              }
            }
            
            public override Builder MergeFrom(Avatar other) {
              if (other == global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar.DefaultInstance) return this;
              PrepareBuilder();
              if (other.HasContentType) {
                ContentType = other.ContentType;
              }
              if (other.HasLength) {
                Length = other.Length;
              }
              this.MergeUnknownFields(other.UnknownFields);
              return this;
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input) {
              return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              PrepareBuilder();
              pb::UnknownFieldSet.Builder unknownFields = null;
              uint tag;
              string field_name;
              while (input.ReadTag(out tag, out field_name)) {
                if(tag == 0 && field_name != null) {
                  int field_ordinal = global::System.Array.BinarySearch(_avatarFieldNames, field_name, global::System.StringComparer.Ordinal);
                  if(field_ordinal >= 0)
                    tag = _avatarFieldTags[field_ordinal];
                  else {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    continue;
                  }
                }
                switch (tag) {
                  case 0: {
                    throw pb::InvalidProtocolBufferException.InvalidTag();
                  }
                  default: {
                    if (pb::WireFormat.IsEndGroupTag(tag)) {
                      if (unknownFields != null) {
                        this.UnknownFields = unknownFields.Build();
                      }
                      return this;
                    }
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    break;
                  }
                  case 10: {
                    result.hasContentType = input.ReadString(ref result.contentType_);
                    break;
                  }
                  case 16: {
                    result.hasLength = input.ReadUInt32(ref result.length_);
                    break;
                  }
                }
              }
              
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            
            
            public bool HasContentType {
              get { return result.hasContentType; }
            }
            public string ContentType {
              get { return result.ContentType; }
              set { SetContentType(value); }
            }
            public Builder SetContentType(string value) {
              pb::ThrowHelper.ThrowIfNull(value, "value");
              PrepareBuilder();
              result.hasContentType = true;
              result.contentType_ = value;
              return this;
            }
            public Builder ClearContentType() {
              PrepareBuilder();
              result.hasContentType = false;
              result.contentType_ = "";
              return this;
            }
            
            public bool HasLength {
              get { return result.hasLength; }
            }
            [global::System.CLSCompliant(false)]
            public uint Length {
              get { return result.Length; }
              set { SetLength(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetLength(uint value) {
              PrepareBuilder();
              result.hasLength = true;
              result.length_ = value;
              return this;
            }
            public Builder ClearLength() {
              PrepareBuilder();
              result.hasLength = false;
              result.length_ = 0;
              return this;
            }
          }
          static Avatar() {
            object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
          }
        }
        
      }
      #endregion
      
      public const int IdFieldNumber = 1;
      private bool hasId;
      private pb::ByteString id_ = pb::ByteString.Empty;
      public bool HasId {
        get { return hasId; }
      }
      public pb::ByteString Id {
        get { return id_; }
      }
      
      public const int NameFieldNumber = 2;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int MembersFieldNumber = 3;
      private pbc::PopsicleList<string> members_ = new pbc::PopsicleList<string>();
      public scg::IList<string> MembersList {
        get { return pbc::Lists.AsReadOnly(members_); }
      }
      public int MembersCount {
        get { return members_.Count; }
      }
      public string GetMembers(int index) {
        return members_[index];
      }
      
      public const int AvatarFieldNumber = 4;
      private bool hasAvatar;
      private global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar avatar_;
      public bool HasAvatar {
        get { return hasAvatar; }
      }
      public global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar Avatar {
        get { return avatar_ ?? global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar.DefaultInstance; }
      }
      
      public const int ActiveFieldNumber = 5;
      private bool hasActive;
      private bool active_ = true;
      public bool HasActive {
        get { return hasActive; }
      }
      public bool Active {
        get { return active_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _groupDetailsFieldNames;
        if (hasId) {
          output.WriteBytes(1, field_names[2], Id);
        }
        if (hasName) {
          output.WriteString(2, field_names[4], Name);
        }
        if (members_.Count > 0) {
          output.WriteStringArray(3, field_names[3], members_);
        }
        if (hasAvatar) {
          output.WriteMessage(4, field_names[1], Avatar);
        }
        if (hasActive) {
          output.WriteBool(5, field_names[0], Active);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        {
          int dataSize = 0;
          foreach (string element in MembersList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * members_.Count;
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Avatar);
        }
        if (hasActive) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, Active);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static GroupDetails ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static GroupDetails ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static GroupDetails ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static GroupDetails ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static GroupDetails ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static GroupDetails ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static GroupDetails ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static GroupDetails ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static GroupDetails ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static GroupDetails ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private GroupDetails MakeReadOnly() {
        members_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(GroupDetails prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<GroupDetails, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(GroupDetails cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private GroupDetails result;
        
        private GroupDetails PrepareBuilder() {
          if (resultIsReadOnly) {
            GroupDetails original = result;
            result = new GroupDetails();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override GroupDetails MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::libsignalservice.push.SignalServiceProtos.GroupDetails.Descriptor; }
        }
        
        public override GroupDetails DefaultInstanceForType {
          get { return global::libsignalservice.push.SignalServiceProtos.GroupDetails.DefaultInstance; }
        }
        
        public override GroupDetails BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is GroupDetails) {
            return MergeFrom((GroupDetails) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(GroupDetails other) {
          if (other == global::libsignalservice.push.SignalServiceProtos.GroupDetails.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.members_.Count != 0) {
            result.members_.Add(other.members_);
          }
          if (other.HasAvatar) {
            MergeAvatar(other.Avatar);
          }
          if (other.HasActive) {
            Active = other.Active;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_groupDetailsFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _groupDetailsFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasId = input.ReadBytes(ref result.id_);
                break;
              }
              case 18: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 26: {
                input.ReadStringArray(tag, field_name, result.members_);
                break;
              }
              case 34: {
                global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar.Builder subBuilder = global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar.CreateBuilder();
                if (result.hasAvatar) {
                  subBuilder.MergeFrom(Avatar);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Avatar = subBuilder.BuildPartial();
                break;
              }
              case 40: {
                result.hasActive = input.ReadBool(ref result.active_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasId {
          get { return result.hasId; }
        }
        public pb::ByteString Id {
          get { return result.Id; }
          set { SetId(value); }
        }
        public Builder SetId(pb::ByteString value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasId = true;
          result.id_ = value;
          return this;
        }
        public Builder ClearId() {
          PrepareBuilder();
          result.hasId = false;
          result.id_ = pb::ByteString.Empty;
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public pbc::IPopsicleList<string> MembersList {
          get { return PrepareBuilder().members_; }
        }
        public int MembersCount {
          get { return result.MembersCount; }
        }
        public string GetMembers(int index) {
          return result.GetMembers(index);
        }
        public Builder SetMembers(int index, string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.members_[index] = value;
          return this;
        }
        public Builder AddMembers(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.members_.Add(value);
          return this;
        }
        public Builder AddRangeMembers(scg::IEnumerable<string> values) {
          PrepareBuilder();
          result.members_.Add(values);
          return this;
        }
        public Builder ClearMembers() {
          PrepareBuilder();
          result.members_.Clear();
          return this;
        }
        
        public bool HasAvatar {
         get { return result.hasAvatar; }
        }
        public global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar Avatar {
          get { return result.Avatar; }
          set { SetAvatar(value); }
        }
        public Builder SetAvatar(global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasAvatar = true;
          result.avatar_ = value;
          return this;
        }
        public Builder SetAvatar(global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasAvatar = true;
          result.avatar_ = builderForValue.Build();
          return this;
        }
        public Builder MergeAvatar(global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasAvatar &&
              result.avatar_ != global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar.DefaultInstance) {
              result.avatar_ = global::libsignalservice.push.SignalServiceProtos.GroupDetails.Types.Avatar.CreateBuilder(result.avatar_).MergeFrom(value).BuildPartial();
          } else {
            result.avatar_ = value;
          }
          result.hasAvatar = true;
          return this;
        }
        public Builder ClearAvatar() {
          PrepareBuilder();
          result.hasAvatar = false;
          result.avatar_ = null;
          return this;
        }
        
        public bool HasActive {
          get { return result.hasActive; }
        }
        public bool Active {
          get { return result.Active; }
          set { SetActive(value); }
        }
        public Builder SetActive(bool value) {
          PrepareBuilder();
          result.hasActive = true;
          result.active_ = value;
          return this;
        }
        public Builder ClearActive() {
          PrepareBuilder();
          result.hasActive = false;
          result.active_ = true;
          return this;
        }
      }
      static GroupDetails() {
        object.ReferenceEquals(global::libsignalservice.push.SignalServiceProtos.Descriptor, null);
      }
    }
    
    #endregion
    
  }
}

#endregion Designer generated code
